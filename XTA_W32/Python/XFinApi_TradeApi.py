# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XFinApi_TradeApi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XFinApi_TradeApi')
    _XFinApi_TradeApi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XFinApi_TradeApi', [dirname(__file__)])
        except ImportError:
            import _XFinApi_TradeApi
            return _XFinApi_TradeApi
        try:
            _mod = imp.load_module('_XFinApi_TradeApi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XFinApi_TradeApi = swig_import_helper()
    del swig_import_helper
else:
    import _XFinApi_TradeApi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XFinApi_TradeApi.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XFinApi_TradeApi.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XFinApi_TradeApi.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XFinApi_TradeApi.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XFinApi_TradeApi.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XFinApi_TradeApi.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XFinApi_TradeApi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XFinApi_TradeApi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XFinApi_TradeApi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XFinApi_TradeApi.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XFinApi_TradeApi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XFinApi_TradeApi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StdStringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdStringMap, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.StdStringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _XFinApi_TradeApi.StdStringMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _XFinApi_TradeApi.StdStringMap___bool__(self)

    def __len__(self) -> "std::map< std::string,std::string >::size_type":
        return _XFinApi_TradeApi.StdStringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,std::string >::key_type const &') -> "std::map< std::string,std::string >::mapped_type const &":
        return _XFinApi_TradeApi.StdStringMap___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::string,std::string >::key_type const &') -> "void":
        return _XFinApi_TradeApi.StdStringMap___delitem__(self, key)

    def has_key(self, key: 'std::map< std::string,std::string >::key_type const &') -> "bool":
        return _XFinApi_TradeApi.StdStringMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _XFinApi_TradeApi.StdStringMap_keys(self)

    def values(self) -> "PyObject *":
        return _XFinApi_TradeApi.StdStringMap_values(self)

    def items(self) -> "PyObject *":
        return _XFinApi_TradeApi.StdStringMap_items(self)

    def __contains__(self, key: 'std::map< std::string,std::string >::key_type const &') -> "bool":
        return _XFinApi_TradeApi.StdStringMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.StdStringMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.StdStringMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.StdStringMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _XFinApi_TradeApi.StdStringMap_asdict(self)

    def __init__(self, *args):
        this = _XFinApi_TradeApi.new_StdStringMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _XFinApi_TradeApi.StdStringMap_empty(self)

    def size(self) -> "std::map< std::string,std::string >::size_type":
        return _XFinApi_TradeApi.StdStringMap_size(self)

    def swap(self, v: 'StdStringMap') -> "void":
        return _XFinApi_TradeApi.StdStringMap_swap(self, v)

    def begin(self) -> "std::map< std::string,std::string >::iterator":
        return _XFinApi_TradeApi.StdStringMap_begin(self)

    def end(self) -> "std::map< std::string,std::string >::iterator":
        return _XFinApi_TradeApi.StdStringMap_end(self)

    def rbegin(self) -> "std::map< std::string,std::string >::reverse_iterator":
        return _XFinApi_TradeApi.StdStringMap_rbegin(self)

    def rend(self) -> "std::map< std::string,std::string >::reverse_iterator":
        return _XFinApi_TradeApi.StdStringMap_rend(self)

    def clear(self) -> "void":
        return _XFinApi_TradeApi.StdStringMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::string >::allocator_type":
        return _XFinApi_TradeApi.StdStringMap_get_allocator(self)

    def count(self, x: 'std::map< std::string,std::string >::key_type const &') -> "std::map< std::string,std::string >::size_type":
        return _XFinApi_TradeApi.StdStringMap_count(self, x)

    def erase(self, *args) -> "void":
        return _XFinApi_TradeApi.StdStringMap_erase(self, *args)

    def find(self, x: 'std::map< std::string,std::string >::key_type const &') -> "std::map< std::string,std::string >::iterator":
        return _XFinApi_TradeApi.StdStringMap_find(self, x)

    def lower_bound(self, x: 'std::map< std::string,std::string >::key_type const &') -> "std::map< std::string,std::string >::iterator":
        return _XFinApi_TradeApi.StdStringMap_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::string,std::string >::key_type const &') -> "std::map< std::string,std::string >::iterator":
        return _XFinApi_TradeApi.StdStringMap_upper_bound(self, x)
    __swig_destroy__ = _XFinApi_TradeApi.delete_StdStringMap
    __del__ = lambda self: None
StdStringMap_swigregister = _XFinApi_TradeApi.StdStringMap_swigregister
StdStringMap_swigregister(StdStringMap)

class CodeInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeInfoList, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.CodeInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _XFinApi_TradeApi.CodeInfoList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _XFinApi_TradeApi.CodeInfoList___bool__(self)

    def __len__(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::size_type":
        return _XFinApi_TradeApi.CodeInfoList___len__(self)

    def __getslice__(self, i: 'std::vector< XFinApi::TradeApi::CodeInfo >::difference_type', j: 'std::vector< XFinApi::TradeApi::CodeInfo >::difference_type') -> "std::vector< XFinApi::TradeApi::CodeInfo,std::allocator< XFinApi::TradeApi::CodeInfo > > *":
        return _XFinApi_TradeApi.CodeInfoList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _XFinApi_TradeApi.CodeInfoList___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< XFinApi::TradeApi::CodeInfo >::difference_type', j: 'std::vector< XFinApi::TradeApi::CodeInfo >::difference_type') -> "void":
        return _XFinApi_TradeApi.CodeInfoList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.CodeInfoList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< XFinApi::TradeApi::CodeInfo >::value_type const &":
        return _XFinApi_TradeApi.CodeInfoList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.CodeInfoList___setitem__(self, *args)

    def pop(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::value_type":
        return _XFinApi_TradeApi.CodeInfoList_pop(self)

    def append(self, x: 'CodeInfo') -> "void":
        return _XFinApi_TradeApi.CodeInfoList_append(self, x)

    def empty(self) -> "bool":
        return _XFinApi_TradeApi.CodeInfoList_empty(self)

    def size(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::size_type":
        return _XFinApi_TradeApi.CodeInfoList_size(self)

    def swap(self, v: 'CodeInfoList') -> "void":
        return _XFinApi_TradeApi.CodeInfoList_swap(self, v)

    def begin(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::iterator":
        return _XFinApi_TradeApi.CodeInfoList_begin(self)

    def end(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::iterator":
        return _XFinApi_TradeApi.CodeInfoList_end(self)

    def rbegin(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::reverse_iterator":
        return _XFinApi_TradeApi.CodeInfoList_rbegin(self)

    def rend(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::reverse_iterator":
        return _XFinApi_TradeApi.CodeInfoList_rend(self)

    def clear(self) -> "void":
        return _XFinApi_TradeApi.CodeInfoList_clear(self)

    def get_allocator(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::allocator_type":
        return _XFinApi_TradeApi.CodeInfoList_get_allocator(self)

    def pop_back(self) -> "void":
        return _XFinApi_TradeApi.CodeInfoList_pop_back(self)

    def erase(self, *args) -> "std::vector< XFinApi::TradeApi::CodeInfo >::iterator":
        return _XFinApi_TradeApi.CodeInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _XFinApi_TradeApi.new_CodeInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'CodeInfo') -> "void":
        return _XFinApi_TradeApi.CodeInfoList_push_back(self, x)

    def front(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::value_type const &":
        return _XFinApi_TradeApi.CodeInfoList_front(self)

    def back(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::value_type const &":
        return _XFinApi_TradeApi.CodeInfoList_back(self)

    def assign(self, n: 'std::vector< XFinApi::TradeApi::CodeInfo >::size_type', x: 'CodeInfo') -> "void":
        return _XFinApi_TradeApi.CodeInfoList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _XFinApi_TradeApi.CodeInfoList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _XFinApi_TradeApi.CodeInfoList_insert(self, *args)

    def reserve(self, n: 'std::vector< XFinApi::TradeApi::CodeInfo >::size_type') -> "void":
        return _XFinApi_TradeApi.CodeInfoList_reserve(self, n)

    def capacity(self) -> "std::vector< XFinApi::TradeApi::CodeInfo >::size_type":
        return _XFinApi_TradeApi.CodeInfoList_capacity(self)
    __swig_destroy__ = _XFinApi_TradeApi.delete_CodeInfoList
    __del__ = lambda self: None
CodeInfoList_swigregister = _XFinApi_TradeApi.CodeInfoList_swigregister
CodeInfoList_swigregister(CodeInfoList)

class OrderList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderList, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.OrderList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _XFinApi_TradeApi.OrderList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _XFinApi_TradeApi.OrderList___bool__(self)

    def __len__(self) -> "std::vector< XFinApi::TradeApi::Order >::size_type":
        return _XFinApi_TradeApi.OrderList___len__(self)

    def __getslice__(self, i: 'std::vector< XFinApi::TradeApi::Order >::difference_type', j: 'std::vector< XFinApi::TradeApi::Order >::difference_type') -> "std::vector< XFinApi::TradeApi::Order,std::allocator< XFinApi::TradeApi::Order > > *":
        return _XFinApi_TradeApi.OrderList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _XFinApi_TradeApi.OrderList___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< XFinApi::TradeApi::Order >::difference_type', j: 'std::vector< XFinApi::TradeApi::Order >::difference_type') -> "void":
        return _XFinApi_TradeApi.OrderList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.OrderList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< XFinApi::TradeApi::Order >::value_type const &":
        return _XFinApi_TradeApi.OrderList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.OrderList___setitem__(self, *args)

    def pop(self) -> "std::vector< XFinApi::TradeApi::Order >::value_type":
        return _XFinApi_TradeApi.OrderList_pop(self)

    def append(self, x: 'Order') -> "void":
        return _XFinApi_TradeApi.OrderList_append(self, x)

    def empty(self) -> "bool":
        return _XFinApi_TradeApi.OrderList_empty(self)

    def size(self) -> "std::vector< XFinApi::TradeApi::Order >::size_type":
        return _XFinApi_TradeApi.OrderList_size(self)

    def swap(self, v: 'OrderList') -> "void":
        return _XFinApi_TradeApi.OrderList_swap(self, v)

    def begin(self) -> "std::vector< XFinApi::TradeApi::Order >::iterator":
        return _XFinApi_TradeApi.OrderList_begin(self)

    def end(self) -> "std::vector< XFinApi::TradeApi::Order >::iterator":
        return _XFinApi_TradeApi.OrderList_end(self)

    def rbegin(self) -> "std::vector< XFinApi::TradeApi::Order >::reverse_iterator":
        return _XFinApi_TradeApi.OrderList_rbegin(self)

    def rend(self) -> "std::vector< XFinApi::TradeApi::Order >::reverse_iterator":
        return _XFinApi_TradeApi.OrderList_rend(self)

    def clear(self) -> "void":
        return _XFinApi_TradeApi.OrderList_clear(self)

    def get_allocator(self) -> "std::vector< XFinApi::TradeApi::Order >::allocator_type":
        return _XFinApi_TradeApi.OrderList_get_allocator(self)

    def pop_back(self) -> "void":
        return _XFinApi_TradeApi.OrderList_pop_back(self)

    def erase(self, *args) -> "std::vector< XFinApi::TradeApi::Order >::iterator":
        return _XFinApi_TradeApi.OrderList_erase(self, *args)

    def __init__(self, *args):
        this = _XFinApi_TradeApi.new_OrderList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Order') -> "void":
        return _XFinApi_TradeApi.OrderList_push_back(self, x)

    def front(self) -> "std::vector< XFinApi::TradeApi::Order >::value_type const &":
        return _XFinApi_TradeApi.OrderList_front(self)

    def back(self) -> "std::vector< XFinApi::TradeApi::Order >::value_type const &":
        return _XFinApi_TradeApi.OrderList_back(self)

    def assign(self, n: 'std::vector< XFinApi::TradeApi::Order >::size_type', x: 'Order') -> "void":
        return _XFinApi_TradeApi.OrderList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _XFinApi_TradeApi.OrderList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _XFinApi_TradeApi.OrderList_insert(self, *args)

    def reserve(self, n: 'std::vector< XFinApi::TradeApi::Order >::size_type') -> "void":
        return _XFinApi_TradeApi.OrderList_reserve(self, n)

    def capacity(self) -> "std::vector< XFinApi::TradeApi::Order >::size_type":
        return _XFinApi_TradeApi.OrderList_capacity(self)
    __swig_destroy__ = _XFinApi_TradeApi.delete_OrderList
    __del__ = lambda self: None
OrderList_swigregister = _XFinApi_TradeApi.OrderList_swigregister
OrderList_swigregister(OrderList)

class TradeOrderList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeOrderList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TradeOrderList, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.TradeOrderList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _XFinApi_TradeApi.TradeOrderList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _XFinApi_TradeApi.TradeOrderList___bool__(self)

    def __len__(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::size_type":
        return _XFinApi_TradeApi.TradeOrderList___len__(self)

    def __getslice__(self, i: 'std::vector< XFinApi::TradeApi::TradeOrder >::difference_type', j: 'std::vector< XFinApi::TradeApi::TradeOrder >::difference_type') -> "std::vector< XFinApi::TradeApi::TradeOrder,std::allocator< XFinApi::TradeApi::TradeOrder > > *":
        return _XFinApi_TradeApi.TradeOrderList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _XFinApi_TradeApi.TradeOrderList___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< XFinApi::TradeApi::TradeOrder >::difference_type', j: 'std::vector< XFinApi::TradeApi::TradeOrder >::difference_type') -> "void":
        return _XFinApi_TradeApi.TradeOrderList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.TradeOrderList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< XFinApi::TradeApi::TradeOrder >::value_type const &":
        return _XFinApi_TradeApi.TradeOrderList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.TradeOrderList___setitem__(self, *args)

    def pop(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::value_type":
        return _XFinApi_TradeApi.TradeOrderList_pop(self)

    def append(self, x: 'TradeOrder') -> "void":
        return _XFinApi_TradeApi.TradeOrderList_append(self, x)

    def empty(self) -> "bool":
        return _XFinApi_TradeApi.TradeOrderList_empty(self)

    def size(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::size_type":
        return _XFinApi_TradeApi.TradeOrderList_size(self)

    def swap(self, v: 'TradeOrderList') -> "void":
        return _XFinApi_TradeApi.TradeOrderList_swap(self, v)

    def begin(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::iterator":
        return _XFinApi_TradeApi.TradeOrderList_begin(self)

    def end(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::iterator":
        return _XFinApi_TradeApi.TradeOrderList_end(self)

    def rbegin(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::reverse_iterator":
        return _XFinApi_TradeApi.TradeOrderList_rbegin(self)

    def rend(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::reverse_iterator":
        return _XFinApi_TradeApi.TradeOrderList_rend(self)

    def clear(self) -> "void":
        return _XFinApi_TradeApi.TradeOrderList_clear(self)

    def get_allocator(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::allocator_type":
        return _XFinApi_TradeApi.TradeOrderList_get_allocator(self)

    def pop_back(self) -> "void":
        return _XFinApi_TradeApi.TradeOrderList_pop_back(self)

    def erase(self, *args) -> "std::vector< XFinApi::TradeApi::TradeOrder >::iterator":
        return _XFinApi_TradeApi.TradeOrderList_erase(self, *args)

    def __init__(self, *args):
        this = _XFinApi_TradeApi.new_TradeOrderList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'TradeOrder') -> "void":
        return _XFinApi_TradeApi.TradeOrderList_push_back(self, x)

    def front(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::value_type const &":
        return _XFinApi_TradeApi.TradeOrderList_front(self)

    def back(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::value_type const &":
        return _XFinApi_TradeApi.TradeOrderList_back(self)

    def assign(self, n: 'std::vector< XFinApi::TradeApi::TradeOrder >::size_type', x: 'TradeOrder') -> "void":
        return _XFinApi_TradeApi.TradeOrderList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _XFinApi_TradeApi.TradeOrderList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _XFinApi_TradeApi.TradeOrderList_insert(self, *args)

    def reserve(self, n: 'std::vector< XFinApi::TradeApi::TradeOrder >::size_type') -> "void":
        return _XFinApi_TradeApi.TradeOrderList_reserve(self, n)

    def capacity(self) -> "std::vector< XFinApi::TradeApi::TradeOrder >::size_type":
        return _XFinApi_TradeApi.TradeOrderList_capacity(self)
    __swig_destroy__ = _XFinApi_TradeApi.delete_TradeOrderList
    __del__ = lambda self: None
TradeOrderList_swigregister = _XFinApi_TradeApi.TradeOrderList_swigregister
TradeOrderList_swigregister(TradeOrderList)

class InstrumentList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentList, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.InstrumentList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _XFinApi_TradeApi.InstrumentList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _XFinApi_TradeApi.InstrumentList___bool__(self)

    def __len__(self) -> "std::vector< XFinApi::TradeApi::Instrument >::size_type":
        return _XFinApi_TradeApi.InstrumentList___len__(self)

    def __getslice__(self, i: 'std::vector< XFinApi::TradeApi::Instrument >::difference_type', j: 'std::vector< XFinApi::TradeApi::Instrument >::difference_type') -> "std::vector< XFinApi::TradeApi::Instrument,std::allocator< XFinApi::TradeApi::Instrument > > *":
        return _XFinApi_TradeApi.InstrumentList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _XFinApi_TradeApi.InstrumentList___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< XFinApi::TradeApi::Instrument >::difference_type', j: 'std::vector< XFinApi::TradeApi::Instrument >::difference_type') -> "void":
        return _XFinApi_TradeApi.InstrumentList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.InstrumentList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< XFinApi::TradeApi::Instrument >::value_type const &":
        return _XFinApi_TradeApi.InstrumentList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.InstrumentList___setitem__(self, *args)

    def pop(self) -> "std::vector< XFinApi::TradeApi::Instrument >::value_type":
        return _XFinApi_TradeApi.InstrumentList_pop(self)

    def append(self, x: 'Instrument') -> "void":
        return _XFinApi_TradeApi.InstrumentList_append(self, x)

    def empty(self) -> "bool":
        return _XFinApi_TradeApi.InstrumentList_empty(self)

    def size(self) -> "std::vector< XFinApi::TradeApi::Instrument >::size_type":
        return _XFinApi_TradeApi.InstrumentList_size(self)

    def swap(self, v: 'InstrumentList') -> "void":
        return _XFinApi_TradeApi.InstrumentList_swap(self, v)

    def begin(self) -> "std::vector< XFinApi::TradeApi::Instrument >::iterator":
        return _XFinApi_TradeApi.InstrumentList_begin(self)

    def end(self) -> "std::vector< XFinApi::TradeApi::Instrument >::iterator":
        return _XFinApi_TradeApi.InstrumentList_end(self)

    def rbegin(self) -> "std::vector< XFinApi::TradeApi::Instrument >::reverse_iterator":
        return _XFinApi_TradeApi.InstrumentList_rbegin(self)

    def rend(self) -> "std::vector< XFinApi::TradeApi::Instrument >::reverse_iterator":
        return _XFinApi_TradeApi.InstrumentList_rend(self)

    def clear(self) -> "void":
        return _XFinApi_TradeApi.InstrumentList_clear(self)

    def get_allocator(self) -> "std::vector< XFinApi::TradeApi::Instrument >::allocator_type":
        return _XFinApi_TradeApi.InstrumentList_get_allocator(self)

    def pop_back(self) -> "void":
        return _XFinApi_TradeApi.InstrumentList_pop_back(self)

    def erase(self, *args) -> "std::vector< XFinApi::TradeApi::Instrument >::iterator":
        return _XFinApi_TradeApi.InstrumentList_erase(self, *args)

    def __init__(self, *args):
        this = _XFinApi_TradeApi.new_InstrumentList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Instrument') -> "void":
        return _XFinApi_TradeApi.InstrumentList_push_back(self, x)

    def front(self) -> "std::vector< XFinApi::TradeApi::Instrument >::value_type const &":
        return _XFinApi_TradeApi.InstrumentList_front(self)

    def back(self) -> "std::vector< XFinApi::TradeApi::Instrument >::value_type const &":
        return _XFinApi_TradeApi.InstrumentList_back(self)

    def assign(self, n: 'std::vector< XFinApi::TradeApi::Instrument >::size_type', x: 'Instrument') -> "void":
        return _XFinApi_TradeApi.InstrumentList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _XFinApi_TradeApi.InstrumentList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _XFinApi_TradeApi.InstrumentList_insert(self, *args)

    def reserve(self, n: 'std::vector< XFinApi::TradeApi::Instrument >::size_type') -> "void":
        return _XFinApi_TradeApi.InstrumentList_reserve(self, n)

    def capacity(self) -> "std::vector< XFinApi::TradeApi::Instrument >::size_type":
        return _XFinApi_TradeApi.InstrumentList_capacity(self)
    __swig_destroy__ = _XFinApi_TradeApi.delete_InstrumentList
    __del__ = lambda self: None
InstrumentList_swigregister = _XFinApi_TradeApi.InstrumentList_swigregister
InstrumentList_swigregister(InstrumentList)

class PositionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionList, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _XFinApi_TradeApi.PositionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _XFinApi_TradeApi.PositionList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _XFinApi_TradeApi.PositionList___bool__(self)

    def __len__(self) -> "std::vector< XFinApi::TradeApi::Position >::size_type":
        return _XFinApi_TradeApi.PositionList___len__(self)

    def __getslice__(self, i: 'std::vector< XFinApi::TradeApi::Position >::difference_type', j: 'std::vector< XFinApi::TradeApi::Position >::difference_type') -> "std::vector< XFinApi::TradeApi::Position,std::allocator< XFinApi::TradeApi::Position > > *":
        return _XFinApi_TradeApi.PositionList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _XFinApi_TradeApi.PositionList___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< XFinApi::TradeApi::Position >::difference_type', j: 'std::vector< XFinApi::TradeApi::Position >::difference_type') -> "void":
        return _XFinApi_TradeApi.PositionList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.PositionList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< XFinApi::TradeApi::Position >::value_type const &":
        return _XFinApi_TradeApi.PositionList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _XFinApi_TradeApi.PositionList___setitem__(self, *args)

    def pop(self) -> "std::vector< XFinApi::TradeApi::Position >::value_type":
        return _XFinApi_TradeApi.PositionList_pop(self)

    def append(self, x: 'Position') -> "void":
        return _XFinApi_TradeApi.PositionList_append(self, x)

    def empty(self) -> "bool":
        return _XFinApi_TradeApi.PositionList_empty(self)

    def size(self) -> "std::vector< XFinApi::TradeApi::Position >::size_type":
        return _XFinApi_TradeApi.PositionList_size(self)

    def swap(self, v: 'PositionList') -> "void":
        return _XFinApi_TradeApi.PositionList_swap(self, v)

    def begin(self) -> "std::vector< XFinApi::TradeApi::Position >::iterator":
        return _XFinApi_TradeApi.PositionList_begin(self)

    def end(self) -> "std::vector< XFinApi::TradeApi::Position >::iterator":
        return _XFinApi_TradeApi.PositionList_end(self)

    def rbegin(self) -> "std::vector< XFinApi::TradeApi::Position >::reverse_iterator":
        return _XFinApi_TradeApi.PositionList_rbegin(self)

    def rend(self) -> "std::vector< XFinApi::TradeApi::Position >::reverse_iterator":
        return _XFinApi_TradeApi.PositionList_rend(self)

    def clear(self) -> "void":
        return _XFinApi_TradeApi.PositionList_clear(self)

    def get_allocator(self) -> "std::vector< XFinApi::TradeApi::Position >::allocator_type":
        return _XFinApi_TradeApi.PositionList_get_allocator(self)

    def pop_back(self) -> "void":
        return _XFinApi_TradeApi.PositionList_pop_back(self)

    def erase(self, *args) -> "std::vector< XFinApi::TradeApi::Position >::iterator":
        return _XFinApi_TradeApi.PositionList_erase(self, *args)

    def __init__(self, *args):
        this = _XFinApi_TradeApi.new_PositionList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Position') -> "void":
        return _XFinApi_TradeApi.PositionList_push_back(self, x)

    def front(self) -> "std::vector< XFinApi::TradeApi::Position >::value_type const &":
        return _XFinApi_TradeApi.PositionList_front(self)

    def back(self) -> "std::vector< XFinApi::TradeApi::Position >::value_type const &":
        return _XFinApi_TradeApi.PositionList_back(self)

    def assign(self, n: 'std::vector< XFinApi::TradeApi::Position >::size_type', x: 'Position') -> "void":
        return _XFinApi_TradeApi.PositionList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _XFinApi_TradeApi.PositionList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _XFinApi_TradeApi.PositionList_insert(self, *args)

    def reserve(self, n: 'std::vector< XFinApi::TradeApi::Position >::size_type') -> "void":
        return _XFinApi_TradeApi.PositionList_reserve(self, n)

    def capacity(self) -> "std::vector< XFinApi::TradeApi::Position >::size_type":
        return _XFinApi_TradeApi.PositionList_capacity(self)
    __swig_destroy__ = _XFinApi_TradeApi.delete_PositionList
    __del__ = lambda self: None
PositionList_swigregister = _XFinApi_TradeApi.PositionList_swigregister
PositionList_swigregister(PositionList)

XFINAPI_ITRADEAPI_VERSION = _XFinApi_TradeApi.XFINAPI_ITRADEAPI_VERSION
INT32_DEFAULT = _XFinApi_TradeApi.INT32_DEFAULT
INT64_DEFAULT = _XFinApi_TradeApi.INT64_DEFAULT
DOUBLE_DEFAULT = _XFinApi_TradeApi.DOUBLE_DEFAULT

def IsDefaultValue(*args) -> "bool":
    return _XFinApi_TradeApi.IsDefaultValue(*args)
IsDefaultValue = _XFinApi_TradeApi.IsDefaultValue
NoError = _XFinApi_TradeApi.NoError
ErrLoaderVersion = _XFinApi_TradeApi.ErrLoaderVersion
ErrImplVersion = _XFinApi_TradeApi.ErrImplVersion
ErrLoadFailed = _XFinApi_TradeApi.ErrLoadFailed
ErrEntryNotFound = _XFinApi_TradeApi.ErrEntryNotFound
ErrCreateFailed = _XFinApi_TradeApi.ErrCreateFailed
ErrLicenseNotExist = _XFinApi_TradeApi.ErrLicenseNotExist
ErrVersion = _XFinApi_TradeApi.ErrVersion
ErrLastAuthTime = _XFinApi_TradeApi.ErrLastAuthTime
ErrMid = _XFinApi_TradeApi.ErrMid
ErrExpiredTime = _XFinApi_TradeApi.ErrExpiredTime
ErrAuthTimeOut = _XFinApi_TradeApi.ErrAuthTimeOut
ActionKind_LowerRet = _XFinApi_TradeApi.ActionKind_LowerRet
ActionKind_Close = _XFinApi_TradeApi.ActionKind_Close
ActionKind_Connect = _XFinApi_TradeApi.ActionKind_Connect
ActionKind_Authorize = _XFinApi_TradeApi.ActionKind_Authorize
ActionKind_Login = _XFinApi_TradeApi.ActionKind_Login
ActionKind_Open = _XFinApi_TradeApi.ActionKind_Open
ActionKind_Logout = _XFinApi_TradeApi.ActionKind_Logout
ActionKind_Disconnect = _XFinApi_TradeApi.ActionKind_Disconnect
ActionKind_Release = _XFinApi_TradeApi.ActionKind_Release
ActionKind_Subscribe = _XFinApi_TradeApi.ActionKind_Subscribe
ActionKind_UnSubscribe = _XFinApi_TradeApi.ActionKind_UnSubscribe
ActionKind_OrderAction = _XFinApi_TradeApi.ActionKind_OrderAction
ActionKind_QueryOrder = _XFinApi_TradeApi.ActionKind_QueryOrder
ActionKind_QueryTradeOrder = _XFinApi_TradeApi.ActionKind_QueryTradeOrder
ActionKind_QueryInstrument = _XFinApi_TradeApi.ActionKind_QueryInstrument
ActionKind_QueryPosition = _XFinApi_TradeApi.ActionKind_QueryPosition
ActionKind_QueryAccount = _XFinApi_TradeApi.ActionKind_QueryAccount
ResultKind_Success = _XFinApi_TradeApi.ResultKind_Success
ResultKind_Failed = _XFinApi_TradeApi.ResultKind_Failed
ResultKind_Undefined = _XFinApi_TradeApi.ResultKind_Undefined
NetworkKind_TCP = _XFinApi_TradeApi.NetworkKind_TCP
NetworkKind_UDP = _XFinApi_TradeApi.NetworkKind_UDP
OrderStatusKind_Error = _XFinApi_TradeApi.OrderStatusKind_Error
OrderStatusKind_AllTraded = _XFinApi_TradeApi.OrderStatusKind_AllTraded
OrderStatusKind_PartTradedQueueing = _XFinApi_TradeApi.OrderStatusKind_PartTradedQueueing
OrderStatusKind_PartTradedNotQueueing = _XFinApi_TradeApi.OrderStatusKind_PartTradedNotQueueing
OrderStatusKind_NoTradeQueueing = _XFinApi_TradeApi.OrderStatusKind_NoTradeQueueing
OrderStatusKind_NoTradeNotQueueing = _XFinApi_TradeApi.OrderStatusKind_NoTradeNotQueueing
OrderStatusKind_Canceling = _XFinApi_TradeApi.OrderStatusKind_Canceling
OrderStatusKind_Canceled = _XFinApi_TradeApi.OrderStatusKind_Canceled
OrderStatusKind_NotTouched = _XFinApi_TradeApi.OrderStatusKind_NotTouched
OrderStatusKind_Touched = _XFinApi_TradeApi.OrderStatusKind_Touched
OrderStatusKind_Accept = _XFinApi_TradeApi.OrderStatusKind_Accept
OrderStatusKind_Unknown = _XFinApi_TradeApi.OrderStatusKind_Unknown
ExecResultKind_NoExec = _XFinApi_TradeApi.ExecResultKind_NoExec
ExecResultKind_Canceled = _XFinApi_TradeApi.ExecResultKind_Canceled
ExecResultKind_OK = _XFinApi_TradeApi.ExecResultKind_OK
ExecResultKind_NoPosition = _XFinApi_TradeApi.ExecResultKind_NoPosition
ExecResultKind_NoDeposit = _XFinApi_TradeApi.ExecResultKind_NoDeposit
ExecResultKind_NoParticipant = _XFinApi_TradeApi.ExecResultKind_NoParticipant
ExecResultKind_NoClient = _XFinApi_TradeApi.ExecResultKind_NoClient
ExecResultKind_NoInstrument = _XFinApi_TradeApi.ExecResultKind_NoInstrument
ExecResultKind_NoRight = _XFinApi_TradeApi.ExecResultKind_NoRight
ExecResultKind_InvalidVolume = _XFinApi_TradeApi.ExecResultKind_InvalidVolume
ExecResultKind_NoEnoughHistoryTrade = _XFinApi_TradeApi.ExecResultKind_NoEnoughHistoryTrade
ExecResultKind_Unknown = _XFinApi_TradeApi.ExecResultKind_Unknown
DirectionKind_Buy = _XFinApi_TradeApi.DirectionKind_Buy
DirectionKind_Sell = _XFinApi_TradeApi.DirectionKind_Sell
OpenCloseKind_Open = _XFinApi_TradeApi.OpenCloseKind_Open
OpenCloseKind_Close = _XFinApi_TradeApi.OpenCloseKind_Close
OpenCloseKind_ForceClose = _XFinApi_TradeApi.OpenCloseKind_ForceClose
OpenCloseKind_CloseToday = _XFinApi_TradeApi.OpenCloseKind_CloseToday
OpenCloseKind_CloseYesterday = _XFinApi_TradeApi.OpenCloseKind_CloseYesterday
OpenCloseKind_LocalForceClose = _XFinApi_TradeApi.OpenCloseKind_LocalForceClose
OpenCloseKind_ForceOff = _XFinApi_TradeApi.OpenCloseKind_ForceOff
OpenCloseKind__None = _XFinApi_TradeApi.OpenCloseKind__None
PriceConditionKind_AnyPrice = _XFinApi_TradeApi.PriceConditionKind_AnyPrice
PriceConditionKind_LimitPrice = _XFinApi_TradeApi.PriceConditionKind_LimitPrice
TimeConditionKind_IOC = _XFinApi_TradeApi.TimeConditionKind_IOC
TimeConditionKind_FOK = _XFinApi_TradeApi.TimeConditionKind_FOK
TimeConditionKind_FAK = _XFinApi_TradeApi.TimeConditionKind_FAK
TimeConditionKind_GFD = _XFinApi_TradeApi.TimeConditionKind_GFD
TimeConditionKind_GFS = _XFinApi_TradeApi.TimeConditionKind_GFS
TimeConditionKind_GTD = _XFinApi_TradeApi.TimeConditionKind_GTD
TimeConditionKind_GTC = _XFinApi_TradeApi.TimeConditionKind_GTC
TimeConditionKind_GFA = _XFinApi_TradeApi.TimeConditionKind_GFA
VolumeConditionKind_AnyVolume = _XFinApi_TradeApi.VolumeConditionKind_AnyVolume
VolumeConditionKind_MinVolume = _XFinApi_TradeApi.VolumeConditionKind_MinVolume
VolumeConditionKind_CompleteVolume = _XFinApi_TradeApi.VolumeConditionKind_CompleteVolume
ContingentCondKind_Immediately = _XFinApi_TradeApi.ContingentCondKind_Immediately
OrderKind_Order = _XFinApi_TradeApi.OrderKind_Order
OrderKind_Iceberg = _XFinApi_TradeApi.OrderKind_Iceberg
OrderKind_Ghost = _XFinApi_TradeApi.OrderKind_Ghost
OrderKind_Auction = _XFinApi_TradeApi.OrderKind_Auction
OrderKind_UnKnown = _XFinApi_TradeApi.OrderKind_UnKnown
HedgeKind_Speculation = _XFinApi_TradeApi.HedgeKind_Speculation
HedgeKind_Arbitrage = _XFinApi_TradeApi.HedgeKind_Arbitrage
HedgeKind_Hedge = _XFinApi_TradeApi.HedgeKind_Hedge
HedgeKind_MarketMaker = _XFinApi_TradeApi.HedgeKind_MarketMaker
HedgeKind_AllValue = _XFinApi_TradeApi.HedgeKind_AllValue
ProductKind_Futures = _XFinApi_TradeApi.ProductKind_Futures
ProductKind_Options = _XFinApi_TradeApi.ProductKind_Options
ProductKind_Stock = _XFinApi_TradeApi.ProductKind_Stock
OrderActionKind_Insert = _XFinApi_TradeApi.OrderActionKind_Insert
OrderActionKind_Modify = _XFinApi_TradeApi.OrderActionKind_Modify
OrderActionKind_Cancel = _XFinApi_TradeApi.OrderActionKind_Cancel
OrderActionKind_Active = _XFinApi_TradeApi.OrderActionKind_Active
OrderActionKind_Suspend = _XFinApi_TradeApi.OrderActionKind_Suspend
InstrumentStatusKind_BeforeTrading = _XFinApi_TradeApi.InstrumentStatusKind_BeforeTrading
InstrumentStatusKind_NoTrading = _XFinApi_TradeApi.InstrumentStatusKind_NoTrading
InstrumentStatusKind_Continous = _XFinApi_TradeApi.InstrumentStatusKind_Continous
InstrumentStatusKind_AuctionOrdering = _XFinApi_TradeApi.InstrumentStatusKind_AuctionOrdering
InstrumentStatusKind_AuctionBalance = _XFinApi_TradeApi.InstrumentStatusKind_AuctionBalance
InstrumentStatusKind_AuctionMatch = _XFinApi_TradeApi.InstrumentStatusKind_AuctionMatch
InstrumentStatusKind_Closed = _XFinApi_TradeApi.InstrumentStatusKind_Closed
class OpenParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenParams, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_OpenParams
    __del__ = lambda self: None
    __swig_setmethods__["UserID"] = _XFinApi_TradeApi.OpenParams_UserID_set
    __swig_getmethods__["UserID"] = _XFinApi_TradeApi.OpenParams_UserID_get
    if _newclass:
        UserID = _swig_property(_XFinApi_TradeApi.OpenParams_UserID_get, _XFinApi_TradeApi.OpenParams_UserID_set)
    __swig_setmethods__["Password"] = _XFinApi_TradeApi.OpenParams_Password_set
    __swig_getmethods__["Password"] = _XFinApi_TradeApi.OpenParams_Password_get
    if _newclass:
        Password = _swig_property(_XFinApi_TradeApi.OpenParams_Password_get, _XFinApi_TradeApi.OpenParams_Password_set)
    __swig_setmethods__["HostAddress"] = _XFinApi_TradeApi.OpenParams_HostAddress_set
    __swig_getmethods__["HostAddress"] = _XFinApi_TradeApi.OpenParams_HostAddress_get
    if _newclass:
        HostAddress = _swig_property(_XFinApi_TradeApi.OpenParams_HostAddress_get, _XFinApi_TradeApi.OpenParams_HostAddress_set)
    __swig_setmethods__["BrokerID"] = _XFinApi_TradeApi.OpenParams_BrokerID_set
    __swig_getmethods__["BrokerID"] = _XFinApi_TradeApi.OpenParams_BrokerID_get
    if _newclass:
        BrokerID = _swig_property(_XFinApi_TradeApi.OpenParams_BrokerID_get, _XFinApi_TradeApi.OpenParams_BrokerID_set)
    __swig_setmethods__["NetworkType"] = _XFinApi_TradeApi.OpenParams_NetworkType_set
    __swig_getmethods__["NetworkType"] = _XFinApi_TradeApi.OpenParams_NetworkType_get
    if _newclass:
        NetworkType = _swig_property(_XFinApi_TradeApi.OpenParams_NetworkType_get, _XFinApi_TradeApi.OpenParams_NetworkType_set)
    __swig_setmethods__["IsUTF8"] = _XFinApi_TradeApi.OpenParams_IsUTF8_set
    __swig_getmethods__["IsUTF8"] = _XFinApi_TradeApi.OpenParams_IsUTF8_get
    if _newclass:
        IsUTF8 = _swig_property(_XFinApi_TradeApi.OpenParams_IsUTF8_get, _XFinApi_TradeApi.OpenParams_IsUTF8_set)
    __swig_setmethods__["IsOutputLog"] = _XFinApi_TradeApi.OpenParams_IsOutputLog_set
    __swig_getmethods__["IsOutputLog"] = _XFinApi_TradeApi.OpenParams_IsOutputLog_get
    if _newclass:
        IsOutputLog = _swig_property(_XFinApi_TradeApi.OpenParams_IsOutputLog_get, _XFinApi_TradeApi.OpenParams_IsOutputLog_set)
    __swig_setmethods__["Configs"] = _XFinApi_TradeApi.OpenParams_Configs_set
    __swig_getmethods__["Configs"] = _XFinApi_TradeApi.OpenParams_Configs_get
    if _newclass:
        Configs = _swig_property(_XFinApi_TradeApi.OpenParams_Configs_get, _XFinApi_TradeApi.OpenParams_Configs_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_OpenParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OpenParams_swigregister = _XFinApi_TradeApi.OpenParams_swigregister
OpenParams_swigregister(OpenParams)
cvar = _XFinApi_TradeApi.cvar
ErrUndefined = cvar.ErrUndefined
ErrNullResponce = cvar.ErrNullResponce
ErrApiCreateFailed = cvar.ErrApiCreateFailed
ErrApiIncompatible = cvar.ErrApiIncompatible
ErrCreateCacheDir = cvar.ErrCreateCacheDir
ErrNetwork = cvar.ErrNetwork
ErrTooManyUnhandledReqs = cvar.ErrTooManyUnhandledReqs
ErrTooManyRequests = cvar.ErrTooManyRequests
ErrNotOpened = cvar.ErrNotOpened
ErrAlreadyOpened = cvar.ErrAlreadyOpened
ErrAlreadyClosed = cvar.ErrAlreadyClosed
ErrLoginAddress = cvar.ErrLoginAddress
ErrHostAddress = cvar.ErrHostAddress
ErrQueryAddress = cvar.ErrQueryAddress
ErrBrokerID = cvar.ErrBrokerID
ErrUserID = cvar.ErrUserID
ErrPassword = cvar.ErrPassword
ErrUserIDOrPassword = cvar.ErrUserIDOrPassword
ErrHostPort = cvar.ErrHostPort
ErrLoginPort = cvar.ErrLoginPort
ErrLicense = cvar.ErrLicense
ErrAppID = cvar.ErrAppID
ErrParams = cvar.ErrParams
ErrInstrumentID = cvar.ErrInstrumentID
ErrExchangeID = cvar.ErrExchangeID
ErrProductID = cvar.ErrProductID
ErrProductType = cvar.ErrProductType
ErrPrice = cvar.ErrPrice
ErrVolume = cvar.ErrVolume
ErrDirection = cvar.ErrDirection
ErrOpenCloseType = cvar.ErrOpenCloseType
ErrPriceCond = cvar.ErrPriceCond
ErrTimeCond = cvar.ErrTimeCond
ErrVolumeCond = cvar.ErrVolumeCond
ErrHedgeType = cvar.ErrHedgeType
ErrOrderRef = cvar.ErrOrderRef
ErrOrderID = cvar.ErrOrderID
ErrFrontID = cvar.ErrFrontID
ErrSessionID = cvar.ErrSessionID
ErrOrderType = cvar.ErrOrderType
ErrActionType = cvar.ErrActionType
ErrOrderStatus = cvar.ErrOrderStatus
ErrNoTradedVolume = cvar.ErrNoTradedVolume
ErrUserNotLogouted = cvar.ErrUserNotLogouted
ErrRelease = cvar.ErrRelease
ErrConnect = cvar.ErrConnect
ErrConnectFailed = cvar.ErrConnectFailed
ErrUserNotLogged = cvar.ErrUserNotLogged
ErrDataEmpty = cvar.ErrDataEmpty
ErrDllException = cvar.ErrDllException
ErrCloseInitiative = cvar.ErrCloseInitiative
ErrClosePassive = cvar.ErrClosePassive
ErrProviderOnlyOneUser = cvar.ErrProviderOnlyOneUser
ErrCallOneTimeOnly = cvar.ErrCallOneTimeOnly
ErrAccount = cvar.ErrAccount
ErrSubAccount = cvar.ErrSubAccount
ErrSocket = cvar.ErrSocket
ErrWSARecvFrom = cvar.ErrWSARecvFrom
ErrAccountStatus = cvar.ErrAccountStatus
ErrInstrumentStatus = cvar.ErrInstrumentStatus
ErrLoggedInElsewhere = cvar.ErrLoggedInElsewhere
ErrInvestorID = cvar.ErrInvestorID
ErrPricePrecision = cvar.ErrPricePrecision
ErrLicenseFile = cvar.ErrLicenseFile
ErrLicensePwd = cvar.ErrLicensePwd
ErrSendQueueSize = cvar.ErrSendQueueSize
ErrNewPacker = cvar.ErrNewPacker
ErrNewUnPacker = cvar.ErrNewUnPacker
ErrCacheFolderTooLong = cvar.ErrCacheFolderTooLong

class CodeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Code"] = _XFinApi_TradeApi.CodeInfo_Code_set
    __swig_getmethods__["Code"] = _XFinApi_TradeApi.CodeInfo_Code_get
    if _newclass:
        Code = _swig_property(_XFinApi_TradeApi.CodeInfo_Code_get, _XFinApi_TradeApi.CodeInfo_Code_set)
    __swig_setmethods__["LowerCode"] = _XFinApi_TradeApi.CodeInfo_LowerCode_set
    __swig_getmethods__["LowerCode"] = _XFinApi_TradeApi.CodeInfo_LowerCode_get
    if _newclass:
        LowerCode = _swig_property(_XFinApi_TradeApi.CodeInfo_LowerCode_get, _XFinApi_TradeApi.CodeInfo_LowerCode_set)
    __swig_setmethods__["LowerMessage"] = _XFinApi_TradeApi.CodeInfo_LowerMessage_set
    __swig_getmethods__["LowerMessage"] = _XFinApi_TradeApi.CodeInfo_LowerMessage_get
    if _newclass:
        LowerMessage = _swig_property(_XFinApi_TradeApi.CodeInfo_LowerMessage_get, _XFinApi_TradeApi.CodeInfo_LowerMessage_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_CodeInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XFinApi_TradeApi.delete_CodeInfo
    __del__ = lambda self: None
CodeInfo_swigregister = _XFinApi_TradeApi.CodeInfo_swigregister
CodeInfo_swigregister(CodeInfo)

class NotifyParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ActionType"] = _XFinApi_TradeApi.NotifyParams_ActionType_set
    __swig_getmethods__["ActionType"] = _XFinApi_TradeApi.NotifyParams_ActionType_get
    if _newclass:
        ActionType = _swig_property(_XFinApi_TradeApi.NotifyParams_ActionType_get, _XFinApi_TradeApi.NotifyParams_ActionType_set)
    __swig_setmethods__["ResultType"] = _XFinApi_TradeApi.NotifyParams_ResultType_set
    __swig_getmethods__["ResultType"] = _XFinApi_TradeApi.NotifyParams_ResultType_get
    if _newclass:
        ResultType = _swig_property(_XFinApi_TradeApi.NotifyParams_ResultType_get, _XFinApi_TradeApi.NotifyParams_ResultType_set)
    __swig_setmethods__["CodeInfos"] = _XFinApi_TradeApi.NotifyParams_CodeInfos_set
    __swig_getmethods__["CodeInfos"] = _XFinApi_TradeApi.NotifyParams_CodeInfos_get
    if _newclass:
        CodeInfos = _swig_property(_XFinApi_TradeApi.NotifyParams_CodeInfos_get, _XFinApi_TradeApi.NotifyParams_CodeInfos_set)

    def Clear(self) -> "void":
        return _XFinApi_TradeApi.NotifyParams_Clear(self)

    def IsSuccess(self) -> "bool":
        return _XFinApi_TradeApi.NotifyParams_IsSuccess(self)

    def __init__(self):
        this = _XFinApi_TradeApi.new_NotifyParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XFinApi_TradeApi.delete_NotifyParams
    __del__ = lambda self: None
NotifyParams_swigregister = _XFinApi_TradeApi.NotifyParams_swigregister
NotifyParams_swigregister(NotifyParams)

class QueryParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QueryParams, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_QueryParams
    __del__ = lambda self: None
    __swig_setmethods__["InvestorID"] = _XFinApi_TradeApi.QueryParams_InvestorID_set
    __swig_getmethods__["InvestorID"] = _XFinApi_TradeApi.QueryParams_InvestorID_get
    if _newclass:
        InvestorID = _swig_property(_XFinApi_TradeApi.QueryParams_InvestorID_get, _XFinApi_TradeApi.QueryParams_InvestorID_set)
    __swig_setmethods__["BrokerID"] = _XFinApi_TradeApi.QueryParams_BrokerID_set
    __swig_getmethods__["BrokerID"] = _XFinApi_TradeApi.QueryParams_BrokerID_get
    if _newclass:
        BrokerID = _swig_property(_XFinApi_TradeApi.QueryParams_BrokerID_get, _XFinApi_TradeApi.QueryParams_BrokerID_set)
    __swig_setmethods__["ExchangeID"] = _XFinApi_TradeApi.QueryParams_ExchangeID_set
    __swig_getmethods__["ExchangeID"] = _XFinApi_TradeApi.QueryParams_ExchangeID_get
    if _newclass:
        ExchangeID = _swig_property(_XFinApi_TradeApi.QueryParams_ExchangeID_get, _XFinApi_TradeApi.QueryParams_ExchangeID_set)
    __swig_setmethods__["ExchangeInstID"] = _XFinApi_TradeApi.QueryParams_ExchangeInstID_set
    __swig_getmethods__["ExchangeInstID"] = _XFinApi_TradeApi.QueryParams_ExchangeInstID_get
    if _newclass:
        ExchangeInstID = _swig_property(_XFinApi_TradeApi.QueryParams_ExchangeInstID_get, _XFinApi_TradeApi.QueryParams_ExchangeInstID_set)
    __swig_setmethods__["InstrumentID"] = _XFinApi_TradeApi.QueryParams_InstrumentID_set
    __swig_getmethods__["InstrumentID"] = _XFinApi_TradeApi.QueryParams_InstrumentID_get
    if _newclass:
        InstrumentID = _swig_property(_XFinApi_TradeApi.QueryParams_InstrumentID_get, _XFinApi_TradeApi.QueryParams_InstrumentID_set)
    __swig_setmethods__["ProductType"] = _XFinApi_TradeApi.QueryParams_ProductType_set
    __swig_getmethods__["ProductType"] = _XFinApi_TradeApi.QueryParams_ProductType_get
    if _newclass:
        ProductType = _swig_property(_XFinApi_TradeApi.QueryParams_ProductType_get, _XFinApi_TradeApi.QueryParams_ProductType_set)
    __swig_setmethods__["ProductID"] = _XFinApi_TradeApi.QueryParams_ProductID_set
    __swig_getmethods__["ProductID"] = _XFinApi_TradeApi.QueryParams_ProductID_get
    if _newclass:
        ProductID = _swig_property(_XFinApi_TradeApi.QueryParams_ProductID_get, _XFinApi_TradeApi.QueryParams_ProductID_set)
    __swig_setmethods__["OrderID"] = _XFinApi_TradeApi.QueryParams_OrderID_set
    __swig_getmethods__["OrderID"] = _XFinApi_TradeApi.QueryParams_OrderID_get
    if _newclass:
        OrderID = _swig_property(_XFinApi_TradeApi.QueryParams_OrderID_get, _XFinApi_TradeApi.QueryParams_OrderID_set)
    __swig_setmethods__["TradeID"] = _XFinApi_TradeApi.QueryParams_TradeID_set
    __swig_getmethods__["TradeID"] = _XFinApi_TradeApi.QueryParams_TradeID_get
    if _newclass:
        TradeID = _swig_property(_XFinApi_TradeApi.QueryParams_TradeID_get, _XFinApi_TradeApi.QueryParams_TradeID_set)
    __swig_setmethods__["InsertTimeStart"] = _XFinApi_TradeApi.QueryParams_InsertTimeStart_set
    __swig_getmethods__["InsertTimeStart"] = _XFinApi_TradeApi.QueryParams_InsertTimeStart_get
    if _newclass:
        InsertTimeStart = _swig_property(_XFinApi_TradeApi.QueryParams_InsertTimeStart_get, _XFinApi_TradeApi.QueryParams_InsertTimeStart_set)
    __swig_setmethods__["InsertTimeEnd"] = _XFinApi_TradeApi.QueryParams_InsertTimeEnd_set
    __swig_getmethods__["InsertTimeEnd"] = _XFinApi_TradeApi.QueryParams_InsertTimeEnd_get
    if _newclass:
        InsertTimeEnd = _swig_property(_XFinApi_TradeApi.QueryParams_InsertTimeEnd_get, _XFinApi_TradeApi.QueryParams_InsertTimeEnd_set)
    __swig_setmethods__["TradeTimeStart"] = _XFinApi_TradeApi.QueryParams_TradeTimeStart_set
    __swig_getmethods__["TradeTimeStart"] = _XFinApi_TradeApi.QueryParams_TradeTimeStart_get
    if _newclass:
        TradeTimeStart = _swig_property(_XFinApi_TradeApi.QueryParams_TradeTimeStart_get, _XFinApi_TradeApi.QueryParams_TradeTimeStart_set)
    __swig_setmethods__["TradeTimeEnd"] = _XFinApi_TradeApi.QueryParams_TradeTimeEnd_set
    __swig_getmethods__["TradeTimeEnd"] = _XFinApi_TradeApi.QueryParams_TradeTimeEnd_get
    if _newclass:
        TradeTimeEnd = _swig_property(_XFinApi_TradeApi.QueryParams_TradeTimeEnd_get, _XFinApi_TradeApi.QueryParams_TradeTimeEnd_set)
    __swig_setmethods__["CurrencyID"] = _XFinApi_TradeApi.QueryParams_CurrencyID_set
    __swig_getmethods__["CurrencyID"] = _XFinApi_TradeApi.QueryParams_CurrencyID_get
    if _newclass:
        CurrencyID = _swig_property(_XFinApi_TradeApi.QueryParams_CurrencyID_get, _XFinApi_TradeApi.QueryParams_CurrencyID_set)
    __swig_setmethods__["HedgeType"] = _XFinApi_TradeApi.QueryParams_HedgeType_set
    __swig_getmethods__["HedgeType"] = _XFinApi_TradeApi.QueryParams_HedgeType_get
    if _newclass:
        HedgeType = _swig_property(_XFinApi_TradeApi.QueryParams_HedgeType_get, _XFinApi_TradeApi.QueryParams_HedgeType_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_QueryParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
QueryParams_swigregister = _XFinApi_TradeApi.QueryParams_swigregister
QueryParams_swigregister(QueryParams)

PRICE_TIERS = _XFinApi_TradeApi.PRICE_TIERS
class Tick(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tick, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tick, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_Tick
    __del__ = lambda self: None
    __swig_setmethods__["InstrumentID"] = _XFinApi_TradeApi.Tick_InstrumentID_set
    __swig_getmethods__["InstrumentID"] = _XFinApi_TradeApi.Tick_InstrumentID_get
    if _newclass:
        InstrumentID = _swig_property(_XFinApi_TradeApi.Tick_InstrumentID_get, _XFinApi_TradeApi.Tick_InstrumentID_set)
    __swig_setmethods__["ExchangeID"] = _XFinApi_TradeApi.Tick_ExchangeID_set
    __swig_getmethods__["ExchangeID"] = _XFinApi_TradeApi.Tick_ExchangeID_get
    if _newclass:
        ExchangeID = _swig_property(_XFinApi_TradeApi.Tick_ExchangeID_get, _XFinApi_TradeApi.Tick_ExchangeID_set)
    __swig_setmethods__["ExchangeInstID"] = _XFinApi_TradeApi.Tick_ExchangeInstID_set
    __swig_getmethods__["ExchangeInstID"] = _XFinApi_TradeApi.Tick_ExchangeInstID_get
    if _newclass:
        ExchangeInstID = _swig_property(_XFinApi_TradeApi.Tick_ExchangeInstID_get, _XFinApi_TradeApi.Tick_ExchangeInstID_set)
    __swig_setmethods__["ProductID"] = _XFinApi_TradeApi.Tick_ProductID_set
    __swig_getmethods__["ProductID"] = _XFinApi_TradeApi.Tick_ProductID_get
    if _newclass:
        ProductID = _swig_property(_XFinApi_TradeApi.Tick_ProductID_get, _XFinApi_TradeApi.Tick_ProductID_set)
    __swig_setmethods__["TradingDay"] = _XFinApi_TradeApi.Tick_TradingDay_set
    __swig_getmethods__["TradingDay"] = _XFinApi_TradeApi.Tick_TradingDay_get
    if _newclass:
        TradingDay = _swig_property(_XFinApi_TradeApi.Tick_TradingDay_get, _XFinApi_TradeApi.Tick_TradingDay_set)
    __swig_setmethods__["TradingTime"] = _XFinApi_TradeApi.Tick_TradingTime_set
    __swig_getmethods__["TradingTime"] = _XFinApi_TradeApi.Tick_TradingTime_get
    if _newclass:
        TradingTime = _swig_property(_XFinApi_TradeApi.Tick_TradingTime_get, _XFinApi_TradeApi.Tick_TradingTime_set)
    __swig_setmethods__["LocalTime"] = _XFinApi_TradeApi.Tick_LocalTime_set
    __swig_getmethods__["LocalTime"] = _XFinApi_TradeApi.Tick_LocalTime_get
    if _newclass:
        LocalTime = _swig_property(_XFinApi_TradeApi.Tick_LocalTime_get, _XFinApi_TradeApi.Tick_LocalTime_set)
    __swig_setmethods__["TradingState"] = _XFinApi_TradeApi.Tick_TradingState_set
    __swig_getmethods__["TradingState"] = _XFinApi_TradeApi.Tick_TradingState_get
    if _newclass:
        TradingState = _swig_property(_XFinApi_TradeApi.Tick_TradingState_get, _XFinApi_TradeApi.Tick_TradingState_set)
    __swig_setmethods__["Trend"] = _XFinApi_TradeApi.Tick_Trend_set
    __swig_getmethods__["Trend"] = _XFinApi_TradeApi.Tick_Trend_get
    if _newclass:
        Trend = _swig_property(_XFinApi_TradeApi.Tick_Trend_get, _XFinApi_TradeApi.Tick_Trend_set)
    __swig_setmethods__["PreClosePrice"] = _XFinApi_TradeApi.Tick_PreClosePrice_set
    __swig_getmethods__["PreClosePrice"] = _XFinApi_TradeApi.Tick_PreClosePrice_get
    if _newclass:
        PreClosePrice = _swig_property(_XFinApi_TradeApi.Tick_PreClosePrice_get, _XFinApi_TradeApi.Tick_PreClosePrice_set)
    __swig_setmethods__["PreSettlementPrice"] = _XFinApi_TradeApi.Tick_PreSettlementPrice_set
    __swig_getmethods__["PreSettlementPrice"] = _XFinApi_TradeApi.Tick_PreSettlementPrice_get
    if _newclass:
        PreSettlementPrice = _swig_property(_XFinApi_TradeApi.Tick_PreSettlementPrice_get, _XFinApi_TradeApi.Tick_PreSettlementPrice_set)
    __swig_setmethods__["PreOpenInterest"] = _XFinApi_TradeApi.Tick_PreOpenInterest_set
    __swig_getmethods__["PreOpenInterest"] = _XFinApi_TradeApi.Tick_PreOpenInterest_get
    if _newclass:
        PreOpenInterest = _swig_property(_XFinApi_TradeApi.Tick_PreOpenInterest_get, _XFinApi_TradeApi.Tick_PreOpenInterest_set)
    __swig_setmethods__["UpperLimitPrice"] = _XFinApi_TradeApi.Tick_UpperLimitPrice_set
    __swig_getmethods__["UpperLimitPrice"] = _XFinApi_TradeApi.Tick_UpperLimitPrice_get
    if _newclass:
        UpperLimitPrice = _swig_property(_XFinApi_TradeApi.Tick_UpperLimitPrice_get, _XFinApi_TradeApi.Tick_UpperLimitPrice_set)
    __swig_setmethods__["LowerLimitPrice"] = _XFinApi_TradeApi.Tick_LowerLimitPrice_set
    __swig_getmethods__["LowerLimitPrice"] = _XFinApi_TradeApi.Tick_LowerLimitPrice_get
    if _newclass:
        LowerLimitPrice = _swig_property(_XFinApi_TradeApi.Tick_LowerLimitPrice_get, _XFinApi_TradeApi.Tick_LowerLimitPrice_set)
    __swig_setmethods__["PreDelta"] = _XFinApi_TradeApi.Tick_PreDelta_set
    __swig_getmethods__["PreDelta"] = _XFinApi_TradeApi.Tick_PreDelta_get
    if _newclass:
        PreDelta = _swig_property(_XFinApi_TradeApi.Tick_PreDelta_get, _XFinApi_TradeApi.Tick_PreDelta_set)
    __swig_setmethods__["CurrDelta"] = _XFinApi_TradeApi.Tick_CurrDelta_set
    __swig_getmethods__["CurrDelta"] = _XFinApi_TradeApi.Tick_CurrDelta_get
    if _newclass:
        CurrDelta = _swig_property(_XFinApi_TradeApi.Tick_CurrDelta_get, _XFinApi_TradeApi.Tick_CurrDelta_set)
    __swig_setmethods__["LastPrice"] = _XFinApi_TradeApi.Tick_LastPrice_set
    __swig_getmethods__["LastPrice"] = _XFinApi_TradeApi.Tick_LastPrice_get
    if _newclass:
        LastPrice = _swig_property(_XFinApi_TradeApi.Tick_LastPrice_get, _XFinApi_TradeApi.Tick_LastPrice_set)
    __swig_setmethods__["LastVolume"] = _XFinApi_TradeApi.Tick_LastVolume_set
    __swig_getmethods__["LastVolume"] = _XFinApi_TradeApi.Tick_LastVolume_get
    if _newclass:
        LastVolume = _swig_property(_XFinApi_TradeApi.Tick_LastVolume_get, _XFinApi_TradeApi.Tick_LastVolume_set)
    __swig_setmethods__["BidPrice"] = _XFinApi_TradeApi.Tick_BidPrice_set
    __swig_getmethods__["BidPrice"] = _XFinApi_TradeApi.Tick_BidPrice_get
    if _newclass:
        BidPrice = _swig_property(_XFinApi_TradeApi.Tick_BidPrice_get, _XFinApi_TradeApi.Tick_BidPrice_set)
    __swig_setmethods__["BidVolume"] = _XFinApi_TradeApi.Tick_BidVolume_set
    __swig_getmethods__["BidVolume"] = _XFinApi_TradeApi.Tick_BidVolume_get
    if _newclass:
        BidVolume = _swig_property(_XFinApi_TradeApi.Tick_BidVolume_get, _XFinApi_TradeApi.Tick_BidVolume_set)
    __swig_setmethods__["AskPrice"] = _XFinApi_TradeApi.Tick_AskPrice_set
    __swig_getmethods__["AskPrice"] = _XFinApi_TradeApi.Tick_AskPrice_get
    if _newclass:
        AskPrice = _swig_property(_XFinApi_TradeApi.Tick_AskPrice_get, _XFinApi_TradeApi.Tick_AskPrice_set)
    __swig_setmethods__["AskVolume"] = _XFinApi_TradeApi.Tick_AskVolume_set
    __swig_getmethods__["AskVolume"] = _XFinApi_TradeApi.Tick_AskVolume_get
    if _newclass:
        AskVolume = _swig_property(_XFinApi_TradeApi.Tick_AskVolume_get, _XFinApi_TradeApi.Tick_AskVolume_set)
    __swig_setmethods__["AveragePrice"] = _XFinApi_TradeApi.Tick_AveragePrice_set
    __swig_getmethods__["AveragePrice"] = _XFinApi_TradeApi.Tick_AveragePrice_get
    if _newclass:
        AveragePrice = _swig_property(_XFinApi_TradeApi.Tick_AveragePrice_get, _XFinApi_TradeApi.Tick_AveragePrice_set)
    __swig_setmethods__["OpenPrice"] = _XFinApi_TradeApi.Tick_OpenPrice_set
    __swig_getmethods__["OpenPrice"] = _XFinApi_TradeApi.Tick_OpenPrice_get
    if _newclass:
        OpenPrice = _swig_property(_XFinApi_TradeApi.Tick_OpenPrice_get, _XFinApi_TradeApi.Tick_OpenPrice_set)
    __swig_setmethods__["HighestPrice"] = _XFinApi_TradeApi.Tick_HighestPrice_set
    __swig_getmethods__["HighestPrice"] = _XFinApi_TradeApi.Tick_HighestPrice_get
    if _newclass:
        HighestPrice = _swig_property(_XFinApi_TradeApi.Tick_HighestPrice_get, _XFinApi_TradeApi.Tick_HighestPrice_set)
    __swig_setmethods__["LowestPrice"] = _XFinApi_TradeApi.Tick_LowestPrice_set
    __swig_getmethods__["LowestPrice"] = _XFinApi_TradeApi.Tick_LowestPrice_get
    if _newclass:
        LowestPrice = _swig_property(_XFinApi_TradeApi.Tick_LowestPrice_get, _XFinApi_TradeApi.Tick_LowestPrice_set)
    __swig_setmethods__["TotalTurnover"] = _XFinApi_TradeApi.Tick_TotalTurnover_set
    __swig_getmethods__["TotalTurnover"] = _XFinApi_TradeApi.Tick_TotalTurnover_get
    if _newclass:
        TotalTurnover = _swig_property(_XFinApi_TradeApi.Tick_TotalTurnover_get, _XFinApi_TradeApi.Tick_TotalTurnover_set)
    __swig_setmethods__["TotalVolume"] = _XFinApi_TradeApi.Tick_TotalVolume_set
    __swig_getmethods__["TotalVolume"] = _XFinApi_TradeApi.Tick_TotalVolume_get
    if _newclass:
        TotalVolume = _swig_property(_XFinApi_TradeApi.Tick_TotalVolume_get, _XFinApi_TradeApi.Tick_TotalVolume_set)
    __swig_setmethods__["OpenInterest"] = _XFinApi_TradeApi.Tick_OpenInterest_set
    __swig_getmethods__["OpenInterest"] = _XFinApi_TradeApi.Tick_OpenInterest_get
    if _newclass:
        OpenInterest = _swig_property(_XFinApi_TradeApi.Tick_OpenInterest_get, _XFinApi_TradeApi.Tick_OpenInterest_set)
    __swig_setmethods__["ClosePrice"] = _XFinApi_TradeApi.Tick_ClosePrice_set
    __swig_getmethods__["ClosePrice"] = _XFinApi_TradeApi.Tick_ClosePrice_get
    if _newclass:
        ClosePrice = _swig_property(_XFinApi_TradeApi.Tick_ClosePrice_get, _XFinApi_TradeApi.Tick_ClosePrice_set)
    __swig_setmethods__["SettlementPrice"] = _XFinApi_TradeApi.Tick_SettlementPrice_set
    __swig_getmethods__["SettlementPrice"] = _XFinApi_TradeApi.Tick_SettlementPrice_get
    if _newclass:
        SettlementPrice = _swig_property(_XFinApi_TradeApi.Tick_SettlementPrice_get, _XFinApi_TradeApi.Tick_SettlementPrice_set)
    __swig_setmethods__["ImpliedBidPrice"] = _XFinApi_TradeApi.Tick_ImpliedBidPrice_set
    __swig_getmethods__["ImpliedBidPrice"] = _XFinApi_TradeApi.Tick_ImpliedBidPrice_get
    if _newclass:
        ImpliedBidPrice = _swig_property(_XFinApi_TradeApi.Tick_ImpliedBidPrice_get, _XFinApi_TradeApi.Tick_ImpliedBidPrice_set)
    __swig_setmethods__["ImpliedBidVolume"] = _XFinApi_TradeApi.Tick_ImpliedBidVolume_set
    __swig_getmethods__["ImpliedBidVolume"] = _XFinApi_TradeApi.Tick_ImpliedBidVolume_get
    if _newclass:
        ImpliedBidVolume = _swig_property(_XFinApi_TradeApi.Tick_ImpliedBidVolume_get, _XFinApi_TradeApi.Tick_ImpliedBidVolume_set)
    __swig_setmethods__["ImpliedAskPrice"] = _XFinApi_TradeApi.Tick_ImpliedAskPrice_set
    __swig_getmethods__["ImpliedAskPrice"] = _XFinApi_TradeApi.Tick_ImpliedAskPrice_get
    if _newclass:
        ImpliedAskPrice = _swig_property(_XFinApi_TradeApi.Tick_ImpliedAskPrice_get, _XFinApi_TradeApi.Tick_ImpliedAskPrice_set)
    __swig_setmethods__["ImpliedAskVolume"] = _XFinApi_TradeApi.Tick_ImpliedAskVolume_set
    __swig_getmethods__["ImpliedAskVolume"] = _XFinApi_TradeApi.Tick_ImpliedAskVolume_get
    if _newclass:
        ImpliedAskVolume = _swig_property(_XFinApi_TradeApi.Tick_ImpliedAskVolume_get, _XFinApi_TradeApi.Tick_ImpliedAskVolume_set)
    __swig_setmethods__["InsideVolume"] = _XFinApi_TradeApi.Tick_InsideVolume_set
    __swig_getmethods__["InsideVolume"] = _XFinApi_TradeApi.Tick_InsideVolume_get
    if _newclass:
        InsideVolume = _swig_property(_XFinApi_TradeApi.Tick_InsideVolume_get, _XFinApi_TradeApi.Tick_InsideVolume_set)
    __swig_setmethods__["OutsideVolume"] = _XFinApi_TradeApi.Tick_OutsideVolume_set
    __swig_getmethods__["OutsideVolume"] = _XFinApi_TradeApi.Tick_OutsideVolume_get
    if _newclass:
        OutsideVolume = _swig_property(_XFinApi_TradeApi.Tick_OutsideVolume_get, _XFinApi_TradeApi.Tick_OutsideVolume_set)
    __swig_setmethods__["TurnoverRate"] = _XFinApi_TradeApi.Tick_TurnoverRate_set
    __swig_getmethods__["TurnoverRate"] = _XFinApi_TradeApi.Tick_TurnoverRate_get
    if _newclass:
        TurnoverRate = _swig_property(_XFinApi_TradeApi.Tick_TurnoverRate_get, _XFinApi_TradeApi.Tick_TurnoverRate_set)
    __swig_setmethods__["PERatio"] = _XFinApi_TradeApi.Tick_PERatio_set
    __swig_getmethods__["PERatio"] = _XFinApi_TradeApi.Tick_PERatio_get
    if _newclass:
        PERatio = _swig_property(_XFinApi_TradeApi.Tick_PERatio_get, _XFinApi_TradeApi.Tick_PERatio_set)
    __swig_setmethods__["TotalValue"] = _XFinApi_TradeApi.Tick_TotalValue_set
    __swig_getmethods__["TotalValue"] = _XFinApi_TradeApi.Tick_TotalValue_get
    if _newclass:
        TotalValue = _swig_property(_XFinApi_TradeApi.Tick_TotalValue_get, _XFinApi_TradeApi.Tick_TotalValue_set)
    __swig_setmethods__["NegotiableValue"] = _XFinApi_TradeApi.Tick_NegotiableValue_set
    __swig_getmethods__["NegotiableValue"] = _XFinApi_TradeApi.Tick_NegotiableValue_get
    if _newclass:
        NegotiableValue = _swig_property(_XFinApi_TradeApi.Tick_NegotiableValue_get, _XFinApi_TradeApi.Tick_NegotiableValue_set)
    __swig_setmethods__["ChangeSpeed"] = _XFinApi_TradeApi.Tick_ChangeSpeed_set
    __swig_getmethods__["ChangeSpeed"] = _XFinApi_TradeApi.Tick_ChangeSpeed_get
    if _newclass:
        ChangeSpeed = _swig_property(_XFinApi_TradeApi.Tick_ChangeSpeed_get, _XFinApi_TradeApi.Tick_ChangeSpeed_set)
    __swig_setmethods__["ChangeRate"] = _XFinApi_TradeApi.Tick_ChangeRate_set
    __swig_getmethods__["ChangeRate"] = _XFinApi_TradeApi.Tick_ChangeRate_get
    if _newclass:
        ChangeRate = _swig_property(_XFinApi_TradeApi.Tick_ChangeRate_get, _XFinApi_TradeApi.Tick_ChangeRate_set)
    __swig_setmethods__["ChangeValue"] = _XFinApi_TradeApi.Tick_ChangeValue_set
    __swig_getmethods__["ChangeValue"] = _XFinApi_TradeApi.Tick_ChangeValue_get
    if _newclass:
        ChangeValue = _swig_property(_XFinApi_TradeApi.Tick_ChangeValue_get, _XFinApi_TradeApi.Tick_ChangeValue_set)
    __swig_setmethods__["Swing"] = _XFinApi_TradeApi.Tick_Swing_set
    __swig_getmethods__["Swing"] = _XFinApi_TradeApi.Tick_Swing_get
    if _newclass:
        Swing = _swig_property(_XFinApi_TradeApi.Tick_Swing_get, _XFinApi_TradeApi.Tick_Swing_set)
    __swig_setmethods__["TotalBidVolume"] = _XFinApi_TradeApi.Tick_TotalBidVolume_set
    __swig_getmethods__["TotalBidVolume"] = _XFinApi_TradeApi.Tick_TotalBidVolume_get
    if _newclass:
        TotalBidVolume = _swig_property(_XFinApi_TradeApi.Tick_TotalBidVolume_get, _XFinApi_TradeApi.Tick_TotalBidVolume_set)
    __swig_setmethods__["TotalAskVolume"] = _XFinApi_TradeApi.Tick_TotalAskVolume_set
    __swig_getmethods__["TotalAskVolume"] = _XFinApi_TradeApi.Tick_TotalAskVolume_get
    if _newclass:
        TotalAskVolume = _swig_property(_XFinApi_TradeApi.Tick_TotalAskVolume_get, _XFinApi_TradeApi.Tick_TotalAskVolume_set)
    __swig_setmethods__["OpenRestriction"] = _XFinApi_TradeApi.Tick_OpenRestriction_set
    __swig_getmethods__["OpenRestriction"] = _XFinApi_TradeApi.Tick_OpenRestriction_get
    if _newclass:
        OpenRestriction = _swig_property(_XFinApi_TradeApi.Tick_OpenRestriction_get, _XFinApi_TradeApi.Tick_OpenRestriction_set)
    __swig_setmethods__["ActionDay"] = _XFinApi_TradeApi.Tick_ActionDay_set
    __swig_getmethods__["ActionDay"] = _XFinApi_TradeApi.Tick_ActionDay_get
    if _newclass:
        ActionDay = _swig_property(_XFinApi_TradeApi.Tick_ActionDay_get, _XFinApi_TradeApi.Tick_ActionDay_set)

    def GetBidPrice(self, idx: 'int') -> "double":
        return _XFinApi_TradeApi.Tick_GetBidPrice(self, idx)

    def SetBidPrice(self, idx: 'int', val: 'double') -> "void":
        return _XFinApi_TradeApi.Tick_SetBidPrice(self, idx, val)

    def GetBidVolume(self, idx: 'int') -> "int64_t":
        return _XFinApi_TradeApi.Tick_GetBidVolume(self, idx)

    def SetBidVolume(self, idx: 'int', val: 'int64_t') -> "void":
        return _XFinApi_TradeApi.Tick_SetBidVolume(self, idx, val)

    def GetAskPrice(self, idx: 'int') -> "double":
        return _XFinApi_TradeApi.Tick_GetAskPrice(self, idx)

    def SetAskPrice(self, idx: 'int', val: 'double') -> "void":
        return _XFinApi_TradeApi.Tick_SetAskPrice(self, idx, val)

    def GetAskVolume(self, idx: 'int') -> "int64_t":
        return _XFinApi_TradeApi.Tick_GetAskVolume(self, idx)

    def SetAskVolume(self, idx: 'int', val: 'int64_t') -> "void":
        return _XFinApi_TradeApi.Tick_SetAskVolume(self, idx, val)

    def __init__(self):
        this = _XFinApi_TradeApi.new_Tick()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Tick_swigregister = _XFinApi_TradeApi.Tick_swigregister
Tick_swigregister(Tick)

class Instrument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _XFinApi_TradeApi.new_Instrument()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XFinApi_TradeApi.delete_Instrument
    __del__ = lambda self: None
    __swig_setmethods__["InstrumentID"] = _XFinApi_TradeApi.Instrument_InstrumentID_set
    __swig_getmethods__["InstrumentID"] = _XFinApi_TradeApi.Instrument_InstrumentID_get
    if _newclass:
        InstrumentID = _swig_property(_XFinApi_TradeApi.Instrument_InstrumentID_get, _XFinApi_TradeApi.Instrument_InstrumentID_set)
    __swig_setmethods__["ExchangeID"] = _XFinApi_TradeApi.Instrument_ExchangeID_set
    __swig_getmethods__["ExchangeID"] = _XFinApi_TradeApi.Instrument_ExchangeID_get
    if _newclass:
        ExchangeID = _swig_property(_XFinApi_TradeApi.Instrument_ExchangeID_get, _XFinApi_TradeApi.Instrument_ExchangeID_set)
    __swig_setmethods__["InstrumentName"] = _XFinApi_TradeApi.Instrument_InstrumentName_set
    __swig_getmethods__["InstrumentName"] = _XFinApi_TradeApi.Instrument_InstrumentName_get
    if _newclass:
        InstrumentName = _swig_property(_XFinApi_TradeApi.Instrument_InstrumentName_get, _XFinApi_TradeApi.Instrument_InstrumentName_set)
    __swig_setmethods__["ExchangeInstID"] = _XFinApi_TradeApi.Instrument_ExchangeInstID_set
    __swig_getmethods__["ExchangeInstID"] = _XFinApi_TradeApi.Instrument_ExchangeInstID_get
    if _newclass:
        ExchangeInstID = _swig_property(_XFinApi_TradeApi.Instrument_ExchangeInstID_get, _XFinApi_TradeApi.Instrument_ExchangeInstID_set)
    __swig_setmethods__["ProductID"] = _XFinApi_TradeApi.Instrument_ProductID_set
    __swig_getmethods__["ProductID"] = _XFinApi_TradeApi.Instrument_ProductID_get
    if _newclass:
        ProductID = _swig_property(_XFinApi_TradeApi.Instrument_ProductID_get, _XFinApi_TradeApi.Instrument_ProductID_set)
    __swig_setmethods__["ProductType"] = _XFinApi_TradeApi.Instrument_ProductType_set
    __swig_getmethods__["ProductType"] = _XFinApi_TradeApi.Instrument_ProductType_get
    if _newclass:
        ProductType = _swig_property(_XFinApi_TradeApi.Instrument_ProductType_get, _XFinApi_TradeApi.Instrument_ProductType_set)
    __swig_setmethods__["DeliveryYear"] = _XFinApi_TradeApi.Instrument_DeliveryYear_set
    __swig_getmethods__["DeliveryYear"] = _XFinApi_TradeApi.Instrument_DeliveryYear_get
    if _newclass:
        DeliveryYear = _swig_property(_XFinApi_TradeApi.Instrument_DeliveryYear_get, _XFinApi_TradeApi.Instrument_DeliveryYear_set)
    __swig_setmethods__["DeliveryMonth"] = _XFinApi_TradeApi.Instrument_DeliveryMonth_set
    __swig_getmethods__["DeliveryMonth"] = _XFinApi_TradeApi.Instrument_DeliveryMonth_get
    if _newclass:
        DeliveryMonth = _swig_property(_XFinApi_TradeApi.Instrument_DeliveryMonth_get, _XFinApi_TradeApi.Instrument_DeliveryMonth_set)
    __swig_setmethods__["CreateDate"] = _XFinApi_TradeApi.Instrument_CreateDate_set
    __swig_getmethods__["CreateDate"] = _XFinApi_TradeApi.Instrument_CreateDate_get
    if _newclass:
        CreateDate = _swig_property(_XFinApi_TradeApi.Instrument_CreateDate_get, _XFinApi_TradeApi.Instrument_CreateDate_set)
    __swig_setmethods__["OpenDate"] = _XFinApi_TradeApi.Instrument_OpenDate_set
    __swig_getmethods__["OpenDate"] = _XFinApi_TradeApi.Instrument_OpenDate_get
    if _newclass:
        OpenDate = _swig_property(_XFinApi_TradeApi.Instrument_OpenDate_get, _XFinApi_TradeApi.Instrument_OpenDate_set)
    __swig_setmethods__["ExpireDate"] = _XFinApi_TradeApi.Instrument_ExpireDate_set
    __swig_getmethods__["ExpireDate"] = _XFinApi_TradeApi.Instrument_ExpireDate_get
    if _newclass:
        ExpireDate = _swig_property(_XFinApi_TradeApi.Instrument_ExpireDate_get, _XFinApi_TradeApi.Instrument_ExpireDate_set)
    __swig_setmethods__["StartDelivDate"] = _XFinApi_TradeApi.Instrument_StartDelivDate_set
    __swig_getmethods__["StartDelivDate"] = _XFinApi_TradeApi.Instrument_StartDelivDate_get
    if _newclass:
        StartDelivDate = _swig_property(_XFinApi_TradeApi.Instrument_StartDelivDate_get, _XFinApi_TradeApi.Instrument_StartDelivDate_set)
    __swig_setmethods__["EndDelivDate"] = _XFinApi_TradeApi.Instrument_EndDelivDate_set
    __swig_getmethods__["EndDelivDate"] = _XFinApi_TradeApi.Instrument_EndDelivDate_get
    if _newclass:
        EndDelivDate = _swig_property(_XFinApi_TradeApi.Instrument_EndDelivDate_get, _XFinApi_TradeApi.Instrument_EndDelivDate_set)
    __swig_setmethods__["LastTick"] = _XFinApi_TradeApi.Instrument_LastTick_set
    __swig_getmethods__["LastTick"] = _XFinApi_TradeApi.Instrument_LastTick_get
    if _newclass:
        LastTick = _swig_property(_XFinApi_TradeApi.Instrument_LastTick_get, _XFinApi_TradeApi.Instrument_LastTick_set)
    __swig_setmethods__["MaxMarketOrderVolume"] = _XFinApi_TradeApi.Instrument_MaxMarketOrderVolume_set
    __swig_getmethods__["MaxMarketOrderVolume"] = _XFinApi_TradeApi.Instrument_MaxMarketOrderVolume_get
    if _newclass:
        MaxMarketOrderVolume = _swig_property(_XFinApi_TradeApi.Instrument_MaxMarketOrderVolume_get, _XFinApi_TradeApi.Instrument_MaxMarketOrderVolume_set)
    __swig_setmethods__["MinMarketOrderVolume"] = _XFinApi_TradeApi.Instrument_MinMarketOrderVolume_set
    __swig_getmethods__["MinMarketOrderVolume"] = _XFinApi_TradeApi.Instrument_MinMarketOrderVolume_get
    if _newclass:
        MinMarketOrderVolume = _swig_property(_XFinApi_TradeApi.Instrument_MinMarketOrderVolume_get, _XFinApi_TradeApi.Instrument_MinMarketOrderVolume_set)
    __swig_setmethods__["MaxLimitOrderVolume"] = _XFinApi_TradeApi.Instrument_MaxLimitOrderVolume_set
    __swig_getmethods__["MaxLimitOrderVolume"] = _XFinApi_TradeApi.Instrument_MaxLimitOrderVolume_get
    if _newclass:
        MaxLimitOrderVolume = _swig_property(_XFinApi_TradeApi.Instrument_MaxLimitOrderVolume_get, _XFinApi_TradeApi.Instrument_MaxLimitOrderVolume_set)
    __swig_setmethods__["MinLimitOrderVolume"] = _XFinApi_TradeApi.Instrument_MinLimitOrderVolume_set
    __swig_getmethods__["MinLimitOrderVolume"] = _XFinApi_TradeApi.Instrument_MinLimitOrderVolume_get
    if _newclass:
        MinLimitOrderVolume = _swig_property(_XFinApi_TradeApi.Instrument_MinLimitOrderVolume_get, _XFinApi_TradeApi.Instrument_MinLimitOrderVolume_set)
    __swig_setmethods__["VolumeMultiple"] = _XFinApi_TradeApi.Instrument_VolumeMultiple_set
    __swig_getmethods__["VolumeMultiple"] = _XFinApi_TradeApi.Instrument_VolumeMultiple_get
    if _newclass:
        VolumeMultiple = _swig_property(_XFinApi_TradeApi.Instrument_VolumeMultiple_get, _XFinApi_TradeApi.Instrument_VolumeMultiple_set)
    __swig_setmethods__["PriceTick"] = _XFinApi_TradeApi.Instrument_PriceTick_set
    __swig_getmethods__["PriceTick"] = _XFinApi_TradeApi.Instrument_PriceTick_get
    if _newclass:
        PriceTick = _swig_property(_XFinApi_TradeApi.Instrument_PriceTick_get, _XFinApi_TradeApi.Instrument_PriceTick_set)
    __swig_setmethods__["PricePrecision"] = _XFinApi_TradeApi.Instrument_PricePrecision_set
    __swig_getmethods__["PricePrecision"] = _XFinApi_TradeApi.Instrument_PricePrecision_get
    if _newclass:
        PricePrecision = _swig_property(_XFinApi_TradeApi.Instrument_PricePrecision_get, _XFinApi_TradeApi.Instrument_PricePrecision_set)
    __swig_setmethods__["IsTrading"] = _XFinApi_TradeApi.Instrument_IsTrading_set
    __swig_getmethods__["IsTrading"] = _XFinApi_TradeApi.Instrument_IsTrading_get
    if _newclass:
        IsTrading = _swig_property(_XFinApi_TradeApi.Instrument_IsTrading_get, _XFinApi_TradeApi.Instrument_IsTrading_set)
    __swig_setmethods__["MaxMarginSideAlgorithm"] = _XFinApi_TradeApi.Instrument_MaxMarginSideAlgorithm_set
    __swig_getmethods__["MaxMarginSideAlgorithm"] = _XFinApi_TradeApi.Instrument_MaxMarginSideAlgorithm_get
    if _newclass:
        MaxMarginSideAlgorithm = _swig_property(_XFinApi_TradeApi.Instrument_MaxMarginSideAlgorithm_get, _XFinApi_TradeApi.Instrument_MaxMarginSideAlgorithm_set)
    __swig_setmethods__["Status"] = _XFinApi_TradeApi.Instrument_Status_set
    __swig_getmethods__["Status"] = _XFinApi_TradeApi.Instrument_Status_get
    if _newclass:
        Status = _swig_property(_XFinApi_TradeApi.Instrument_Status_get, _XFinApi_TradeApi.Instrument_Status_set)
    __swig_setmethods__["StrikePrice"] = _XFinApi_TradeApi.Instrument_StrikePrice_set
    __swig_getmethods__["StrikePrice"] = _XFinApi_TradeApi.Instrument_StrikePrice_get
    if _newclass:
        StrikePrice = _swig_property(_XFinApi_TradeApi.Instrument_StrikePrice_get, _XFinApi_TradeApi.Instrument_StrikePrice_set)
    __swig_setmethods__["OptionsType"] = _XFinApi_TradeApi.Instrument_OptionsType_set
    __swig_getmethods__["OptionsType"] = _XFinApi_TradeApi.Instrument_OptionsType_get
    if _newclass:
        OptionsType = _swig_property(_XFinApi_TradeApi.Instrument_OptionsType_get, _XFinApi_TradeApi.Instrument_OptionsType_set)
    __swig_setmethods__["UnderlyingMultiple"] = _XFinApi_TradeApi.Instrument_UnderlyingMultiple_set
    __swig_getmethods__["UnderlyingMultiple"] = _XFinApi_TradeApi.Instrument_UnderlyingMultiple_get
    if _newclass:
        UnderlyingMultiple = _swig_property(_XFinApi_TradeApi.Instrument_UnderlyingMultiple_get, _XFinApi_TradeApi.Instrument_UnderlyingMultiple_set)
    __swig_setmethods__["CombinationType"] = _XFinApi_TradeApi.Instrument_CombinationType_set
    __swig_getmethods__["CombinationType"] = _XFinApi_TradeApi.Instrument_CombinationType_get
    if _newclass:
        CombinationType = _swig_property(_XFinApi_TradeApi.Instrument_CombinationType_get, _XFinApi_TradeApi.Instrument_CombinationType_set)
    __swig_setmethods__["StrikeModeType"] = _XFinApi_TradeApi.Instrument_StrikeModeType_set
    __swig_getmethods__["StrikeModeType"] = _XFinApi_TradeApi.Instrument_StrikeModeType_get
    if _newclass:
        StrikeModeType = _swig_property(_XFinApi_TradeApi.Instrument_StrikeModeType_get, _XFinApi_TradeApi.Instrument_StrikeModeType_set)
    __swig_setmethods__["PositionBuyToday"] = _XFinApi_TradeApi.Instrument_PositionBuyToday_set
    __swig_getmethods__["PositionBuyToday"] = _XFinApi_TradeApi.Instrument_PositionBuyToday_get
    if _newclass:
        PositionBuyToday = _swig_property(_XFinApi_TradeApi.Instrument_PositionBuyToday_get, _XFinApi_TradeApi.Instrument_PositionBuyToday_set)
    __swig_setmethods__["PositionBuyYesterday"] = _XFinApi_TradeApi.Instrument_PositionBuyYesterday_set
    __swig_getmethods__["PositionBuyYesterday"] = _XFinApi_TradeApi.Instrument_PositionBuyYesterday_get
    if _newclass:
        PositionBuyYesterday = _swig_property(_XFinApi_TradeApi.Instrument_PositionBuyYesterday_get, _XFinApi_TradeApi.Instrument_PositionBuyYesterday_set)
    __swig_setmethods__["PositionBuy"] = _XFinApi_TradeApi.Instrument_PositionBuy_set
    __swig_getmethods__["PositionBuy"] = _XFinApi_TradeApi.Instrument_PositionBuy_get
    if _newclass:
        PositionBuy = _swig_property(_XFinApi_TradeApi.Instrument_PositionBuy_get, _XFinApi_TradeApi.Instrument_PositionBuy_set)
    __swig_setmethods__["PositionSellToday"] = _XFinApi_TradeApi.Instrument_PositionSellToday_set
    __swig_getmethods__["PositionSellToday"] = _XFinApi_TradeApi.Instrument_PositionSellToday_get
    if _newclass:
        PositionSellToday = _swig_property(_XFinApi_TradeApi.Instrument_PositionSellToday_get, _XFinApi_TradeApi.Instrument_PositionSellToday_set)
    __swig_setmethods__["PositionSellYesterday"] = _XFinApi_TradeApi.Instrument_PositionSellYesterday_set
    __swig_getmethods__["PositionSellYesterday"] = _XFinApi_TradeApi.Instrument_PositionSellYesterday_get
    if _newclass:
        PositionSellYesterday = _swig_property(_XFinApi_TradeApi.Instrument_PositionSellYesterday_get, _XFinApi_TradeApi.Instrument_PositionSellYesterday_set)
    __swig_setmethods__["PositionSell"] = _XFinApi_TradeApi.Instrument_PositionSell_set
    __swig_getmethods__["PositionSell"] = _XFinApi_TradeApi.Instrument_PositionSell_get
    if _newclass:
        PositionSell = _swig_property(_XFinApi_TradeApi.Instrument_PositionSell_get, _XFinApi_TradeApi.Instrument_PositionSell_set)
    __swig_setmethods__["PositionTotal"] = _XFinApi_TradeApi.Instrument_PositionTotal_set
    __swig_getmethods__["PositionTotal"] = _XFinApi_TradeApi.Instrument_PositionTotal_get
    if _newclass:
        PositionTotal = _swig_property(_XFinApi_TradeApi.Instrument_PositionTotal_get, _XFinApi_TradeApi.Instrument_PositionTotal_set)
    __swig_setmethods__["CanceledOrderCount"] = _XFinApi_TradeApi.Instrument_CanceledOrderCount_set
    __swig_getmethods__["CanceledOrderCount"] = _XFinApi_TradeApi.Instrument_CanceledOrderCount_get
    if _newclass:
        CanceledOrderCount = _swig_property(_XFinApi_TradeApi.Instrument_CanceledOrderCount_get, _XFinApi_TradeApi.Instrument_CanceledOrderCount_set)
    __swig_setmethods__["AddOrderCount"] = _XFinApi_TradeApi.Instrument_AddOrderCount_set
    __swig_getmethods__["AddOrderCount"] = _XFinApi_TradeApi.Instrument_AddOrderCount_get
    if _newclass:
        AddOrderCount = _swig_property(_XFinApi_TradeApi.Instrument_AddOrderCount_get, _XFinApi_TradeApi.Instrument_AddOrderCount_set)
    __swig_setmethods__["SumTradeVolume"] = _XFinApi_TradeApi.Instrument_SumTradeVolume_set
    __swig_getmethods__["SumTradeVolume"] = _XFinApi_TradeApi.Instrument_SumTradeVolume_get
    if _newclass:
        SumTradeVolume = _swig_property(_XFinApi_TradeApi.Instrument_SumTradeVolume_get, _XFinApi_TradeApi.Instrument_SumTradeVolume_set)
    __swig_setmethods__["BuyOpenSum"] = _XFinApi_TradeApi.Instrument_BuyOpenSum_set
    __swig_getmethods__["BuyOpenSum"] = _XFinApi_TradeApi.Instrument_BuyOpenSum_get
    if _newclass:
        BuyOpenSum = _swig_property(_XFinApi_TradeApi.Instrument_BuyOpenSum_get, _XFinApi_TradeApi.Instrument_BuyOpenSum_set)
    __swig_setmethods__["SellOpenSum"] = _XFinApi_TradeApi.Instrument_SellOpenSum_set
    __swig_getmethods__["SellOpenSum"] = _XFinApi_TradeApi.Instrument_SellOpenSum_get
    if _newclass:
        SellOpenSum = _swig_property(_XFinApi_TradeApi.Instrument_SellOpenSum_get, _XFinApi_TradeApi.Instrument_SellOpenSum_set)
    __swig_setmethods__["UntradeOpen"] = _XFinApi_TradeApi.Instrument_UntradeOpen_set
    __swig_getmethods__["UntradeOpen"] = _XFinApi_TradeApi.Instrument_UntradeOpen_get
    if _newclass:
        UntradeOpen = _swig_property(_XFinApi_TradeApi.Instrument_UntradeOpen_get, _XFinApi_TradeApi.Instrument_UntradeOpen_set)
    __swig_setmethods__["UntradeBuyOpen"] = _XFinApi_TradeApi.Instrument_UntradeBuyOpen_set
    __swig_getmethods__["UntradeBuyOpen"] = _XFinApi_TradeApi.Instrument_UntradeBuyOpen_get
    if _newclass:
        UntradeBuyOpen = _swig_property(_XFinApi_TradeApi.Instrument_UntradeBuyOpen_get, _XFinApi_TradeApi.Instrument_UntradeBuyOpen_set)
    __swig_setmethods__["UntradeSellOpen"] = _XFinApi_TradeApi.Instrument_UntradeSellOpen_set
    __swig_getmethods__["UntradeSellOpen"] = _XFinApi_TradeApi.Instrument_UntradeSellOpen_get
    if _newclass:
        UntradeSellOpen = _swig_property(_XFinApi_TradeApi.Instrument_UntradeSellOpen_get, _XFinApi_TradeApi.Instrument_UntradeSellOpen_set)
    __swig_setmethods__["UntradeClose"] = _XFinApi_TradeApi.Instrument_UntradeClose_set
    __swig_getmethods__["UntradeClose"] = _XFinApi_TradeApi.Instrument_UntradeClose_get
    if _newclass:
        UntradeClose = _swig_property(_XFinApi_TradeApi.Instrument_UntradeClose_get, _XFinApi_TradeApi.Instrument_UntradeClose_set)
    __swig_setmethods__["UntradeBuyClose"] = _XFinApi_TradeApi.Instrument_UntradeBuyClose_set
    __swig_getmethods__["UntradeBuyClose"] = _XFinApi_TradeApi.Instrument_UntradeBuyClose_get
    if _newclass:
        UntradeBuyClose = _swig_property(_XFinApi_TradeApi.Instrument_UntradeBuyClose_get, _XFinApi_TradeApi.Instrument_UntradeBuyClose_set)
    __swig_setmethods__["UntradeSellClose"] = _XFinApi_TradeApi.Instrument_UntradeSellClose_set
    __swig_getmethods__["UntradeSellClose"] = _XFinApi_TradeApi.Instrument_UntradeSellClose_get
    if _newclass:
        UntradeSellClose = _swig_property(_XFinApi_TradeApi.Instrument_UntradeSellClose_get, _XFinApi_TradeApi.Instrument_UntradeSellClose_set)
    __swig_setmethods__["OpenRatioByMoney"] = _XFinApi_TradeApi.Instrument_OpenRatioByMoney_set
    __swig_getmethods__["OpenRatioByMoney"] = _XFinApi_TradeApi.Instrument_OpenRatioByMoney_get
    if _newclass:
        OpenRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_OpenRatioByMoney_get, _XFinApi_TradeApi.Instrument_OpenRatioByMoney_set)
    __swig_setmethods__["CloseRatioByMoney"] = _XFinApi_TradeApi.Instrument_CloseRatioByMoney_set
    __swig_getmethods__["CloseRatioByMoney"] = _XFinApi_TradeApi.Instrument_CloseRatioByMoney_get
    if _newclass:
        CloseRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_CloseRatioByMoney_get, _XFinApi_TradeApi.Instrument_CloseRatioByMoney_set)
    __swig_setmethods__["CloseTodayRatioByMoney"] = _XFinApi_TradeApi.Instrument_CloseTodayRatioByMoney_set
    __swig_getmethods__["CloseTodayRatioByMoney"] = _XFinApi_TradeApi.Instrument_CloseTodayRatioByMoney_get
    if _newclass:
        CloseTodayRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_CloseTodayRatioByMoney_get, _XFinApi_TradeApi.Instrument_CloseTodayRatioByMoney_set)
    __swig_setmethods__["OpenRatioByVolume"] = _XFinApi_TradeApi.Instrument_OpenRatioByVolume_set
    __swig_getmethods__["OpenRatioByVolume"] = _XFinApi_TradeApi.Instrument_OpenRatioByVolume_get
    if _newclass:
        OpenRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_OpenRatioByVolume_get, _XFinApi_TradeApi.Instrument_OpenRatioByVolume_set)
    __swig_setmethods__["CloseRatioByVolume"] = _XFinApi_TradeApi.Instrument_CloseRatioByVolume_set
    __swig_getmethods__["CloseRatioByVolume"] = _XFinApi_TradeApi.Instrument_CloseRatioByVolume_get
    if _newclass:
        CloseRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_CloseRatioByVolume_get, _XFinApi_TradeApi.Instrument_CloseRatioByVolume_set)
    __swig_setmethods__["CloseTodayRatioByVolume"] = _XFinApi_TradeApi.Instrument_CloseTodayRatioByVolume_set
    __swig_getmethods__["CloseTodayRatioByVolume"] = _XFinApi_TradeApi.Instrument_CloseTodayRatioByVolume_get
    if _newclass:
        CloseTodayRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_CloseTodayRatioByVolume_get, _XFinApi_TradeApi.Instrument_CloseTodayRatioByVolume_set)
    __swig_setmethods__["StampTaxRateByMoney"] = _XFinApi_TradeApi.Instrument_StampTaxRateByMoney_set
    __swig_getmethods__["StampTaxRateByMoney"] = _XFinApi_TradeApi.Instrument_StampTaxRateByMoney_get
    if _newclass:
        StampTaxRateByMoney = _swig_property(_XFinApi_TradeApi.Instrument_StampTaxRateByMoney_get, _XFinApi_TradeApi.Instrument_StampTaxRateByMoney_set)
    __swig_setmethods__["StampTaxRateByVolume"] = _XFinApi_TradeApi.Instrument_StampTaxRateByVolume_set
    __swig_getmethods__["StampTaxRateByVolume"] = _XFinApi_TradeApi.Instrument_StampTaxRateByVolume_get
    if _newclass:
        StampTaxRateByVolume = _swig_property(_XFinApi_TradeApi.Instrument_StampTaxRateByVolume_get, _XFinApi_TradeApi.Instrument_StampTaxRateByVolume_set)
    __swig_setmethods__["TransferFeeRateByMoney"] = _XFinApi_TradeApi.Instrument_TransferFeeRateByMoney_set
    __swig_getmethods__["TransferFeeRateByMoney"] = _XFinApi_TradeApi.Instrument_TransferFeeRateByMoney_get
    if _newclass:
        TransferFeeRateByMoney = _swig_property(_XFinApi_TradeApi.Instrument_TransferFeeRateByMoney_get, _XFinApi_TradeApi.Instrument_TransferFeeRateByMoney_set)
    __swig_setmethods__["TransferFeeRateByVolume"] = _XFinApi_TradeApi.Instrument_TransferFeeRateByVolume_set
    __swig_getmethods__["TransferFeeRateByVolume"] = _XFinApi_TradeApi.Instrument_TransferFeeRateByVolume_get
    if _newclass:
        TransferFeeRateByVolume = _swig_property(_XFinApi_TradeApi.Instrument_TransferFeeRateByVolume_get, _XFinApi_TradeApi.Instrument_TransferFeeRateByVolume_set)
    __swig_setmethods__["TradeFeeByMoney"] = _XFinApi_TradeApi.Instrument_TradeFeeByMoney_set
    __swig_getmethods__["TradeFeeByMoney"] = _XFinApi_TradeApi.Instrument_TradeFeeByMoney_get
    if _newclass:
        TradeFeeByMoney = _swig_property(_XFinApi_TradeApi.Instrument_TradeFeeByMoney_get, _XFinApi_TradeApi.Instrument_TradeFeeByMoney_set)
    __swig_setmethods__["TradeFeeByVolume"] = _XFinApi_TradeApi.Instrument_TradeFeeByVolume_set
    __swig_getmethods__["TradeFeeByVolume"] = _XFinApi_TradeApi.Instrument_TradeFeeByVolume_get
    if _newclass:
        TradeFeeByVolume = _swig_property(_XFinApi_TradeApi.Instrument_TradeFeeByVolume_get, _XFinApi_TradeApi.Instrument_TradeFeeByVolume_set)
    __swig_setmethods__["MarginByMoney"] = _XFinApi_TradeApi.Instrument_MarginByMoney_set
    __swig_getmethods__["MarginByMoney"] = _XFinApi_TradeApi.Instrument_MarginByMoney_get
    if _newclass:
        MarginByMoney = _swig_property(_XFinApi_TradeApi.Instrument_MarginByMoney_get, _XFinApi_TradeApi.Instrument_MarginByMoney_set)
    __swig_setmethods__["MinTradeFee"] = _XFinApi_TradeApi.Instrument_MinTradeFee_set
    __swig_getmethods__["MinTradeFee"] = _XFinApi_TradeApi.Instrument_MinTradeFee_get
    if _newclass:
        MinTradeFee = _swig_property(_XFinApi_TradeApi.Instrument_MinTradeFee_get, _XFinApi_TradeApi.Instrument_MinTradeFee_set)
    __swig_setmethods__["MinTransferFee"] = _XFinApi_TradeApi.Instrument_MinTransferFee_set
    __swig_getmethods__["MinTransferFee"] = _XFinApi_TradeApi.Instrument_MinTransferFee_get
    if _newclass:
        MinTransferFee = _swig_property(_XFinApi_TradeApi.Instrument_MinTransferFee_get, _XFinApi_TradeApi.Instrument_MinTransferFee_set)
    __swig_setmethods__["SpLongMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_SpLongMarginRatioByMoney_set
    __swig_getmethods__["SpLongMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_SpLongMarginRatioByMoney_get
    if _newclass:
        SpLongMarginRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_SpLongMarginRatioByMoney_get, _XFinApi_TradeApi.Instrument_SpLongMarginRatioByMoney_set)
    __swig_setmethods__["SpLongMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_SpLongMarginRatioByVolume_set
    __swig_getmethods__["SpLongMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_SpLongMarginRatioByVolume_get
    if _newclass:
        SpLongMarginRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_SpLongMarginRatioByVolume_get, _XFinApi_TradeApi.Instrument_SpLongMarginRatioByVolume_set)
    __swig_setmethods__["SpShortMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_SpShortMarginRatioByMoney_set
    __swig_getmethods__["SpShortMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_SpShortMarginRatioByMoney_get
    if _newclass:
        SpShortMarginRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_SpShortMarginRatioByMoney_get, _XFinApi_TradeApi.Instrument_SpShortMarginRatioByMoney_set)
    __swig_setmethods__["SpShortMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_SpShortMarginRatioByVolume_set
    __swig_getmethods__["SpShortMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_SpShortMarginRatioByVolume_get
    if _newclass:
        SpShortMarginRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_SpShortMarginRatioByVolume_get, _XFinApi_TradeApi.Instrument_SpShortMarginRatioByVolume_set)
    __swig_setmethods__["ArLongMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_ArLongMarginRatioByMoney_set
    __swig_getmethods__["ArLongMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_ArLongMarginRatioByMoney_get
    if _newclass:
        ArLongMarginRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_ArLongMarginRatioByMoney_get, _XFinApi_TradeApi.Instrument_ArLongMarginRatioByMoney_set)
    __swig_setmethods__["ArLongMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_ArLongMarginRatioByVolume_set
    __swig_getmethods__["ArLongMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_ArLongMarginRatioByVolume_get
    if _newclass:
        ArLongMarginRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_ArLongMarginRatioByVolume_get, _XFinApi_TradeApi.Instrument_ArLongMarginRatioByVolume_set)
    __swig_setmethods__["ArShortMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_ArShortMarginRatioByMoney_set
    __swig_getmethods__["ArShortMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_ArShortMarginRatioByMoney_get
    if _newclass:
        ArShortMarginRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_ArShortMarginRatioByMoney_get, _XFinApi_TradeApi.Instrument_ArShortMarginRatioByMoney_set)
    __swig_setmethods__["ArShortMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_ArShortMarginRatioByVolume_set
    __swig_getmethods__["ArShortMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_ArShortMarginRatioByVolume_get
    if _newclass:
        ArShortMarginRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_ArShortMarginRatioByVolume_get, _XFinApi_TradeApi.Instrument_ArShortMarginRatioByVolume_set)
    __swig_setmethods__["HeLongMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_HeLongMarginRatioByMoney_set
    __swig_getmethods__["HeLongMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_HeLongMarginRatioByMoney_get
    if _newclass:
        HeLongMarginRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_HeLongMarginRatioByMoney_get, _XFinApi_TradeApi.Instrument_HeLongMarginRatioByMoney_set)
    __swig_setmethods__["HeLongMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_HeLongMarginRatioByVolume_set
    __swig_getmethods__["HeLongMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_HeLongMarginRatioByVolume_get
    if _newclass:
        HeLongMarginRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_HeLongMarginRatioByVolume_get, _XFinApi_TradeApi.Instrument_HeLongMarginRatioByVolume_set)
    __swig_setmethods__["HeShortMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_HeShortMarginRatioByMoney_set
    __swig_getmethods__["HeShortMarginRatioByMoney"] = _XFinApi_TradeApi.Instrument_HeShortMarginRatioByMoney_get
    if _newclass:
        HeShortMarginRatioByMoney = _swig_property(_XFinApi_TradeApi.Instrument_HeShortMarginRatioByMoney_get, _XFinApi_TradeApi.Instrument_HeShortMarginRatioByMoney_set)
    __swig_setmethods__["HeShortMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_HeShortMarginRatioByVolume_set
    __swig_getmethods__["HeShortMarginRatioByVolume"] = _XFinApi_TradeApi.Instrument_HeShortMarginRatioByVolume_get
    if _newclass:
        HeShortMarginRatioByVolume = _swig_property(_XFinApi_TradeApi.Instrument_HeShortMarginRatioByVolume_get, _XFinApi_TradeApi.Instrument_HeShortMarginRatioByVolume_set)
    __swig_setmethods__["LongAvgPrice"] = _XFinApi_TradeApi.Instrument_LongAvgPrice_set
    __swig_getmethods__["LongAvgPrice"] = _XFinApi_TradeApi.Instrument_LongAvgPrice_get
    if _newclass:
        LongAvgPrice = _swig_property(_XFinApi_TradeApi.Instrument_LongAvgPrice_get, _XFinApi_TradeApi.Instrument_LongAvgPrice_set)
    __swig_setmethods__["ShortAvgPrice"] = _XFinApi_TradeApi.Instrument_ShortAvgPrice_set
    __swig_getmethods__["ShortAvgPrice"] = _XFinApi_TradeApi.Instrument_ShortAvgPrice_get
    if _newclass:
        ShortAvgPrice = _swig_property(_XFinApi_TradeApi.Instrument_ShortAvgPrice_get, _XFinApi_TradeApi.Instrument_ShortAvgPrice_set)
    __swig_setmethods__["FrozenMargin"] = _XFinApi_TradeApi.Instrument_FrozenMargin_set
    __swig_getmethods__["FrozenMargin"] = _XFinApi_TradeApi.Instrument_FrozenMargin_get
    if _newclass:
        FrozenMargin = _swig_property(_XFinApi_TradeApi.Instrument_FrozenMargin_get, _XFinApi_TradeApi.Instrument_FrozenMargin_set)
    __swig_setmethods__["LongFrozenMargin"] = _XFinApi_TradeApi.Instrument_LongFrozenMargin_set
    __swig_getmethods__["LongFrozenMargin"] = _XFinApi_TradeApi.Instrument_LongFrozenMargin_get
    if _newclass:
        LongFrozenMargin = _swig_property(_XFinApi_TradeApi.Instrument_LongFrozenMargin_get, _XFinApi_TradeApi.Instrument_LongFrozenMargin_set)
    __swig_setmethods__["ShortFrozenMargin"] = _XFinApi_TradeApi.Instrument_ShortFrozenMargin_set
    __swig_getmethods__["ShortFrozenMargin"] = _XFinApi_TradeApi.Instrument_ShortFrozenMargin_get
    if _newclass:
        ShortFrozenMargin = _swig_property(_XFinApi_TradeApi.Instrument_ShortFrozenMargin_get, _XFinApi_TradeApi.Instrument_ShortFrozenMargin_set)
    __swig_setmethods__["FrozenCommission"] = _XFinApi_TradeApi.Instrument_FrozenCommission_set
    __swig_getmethods__["FrozenCommission"] = _XFinApi_TradeApi.Instrument_FrozenCommission_get
    if _newclass:
        FrozenCommission = _swig_property(_XFinApi_TradeApi.Instrument_FrozenCommission_get, _XFinApi_TradeApi.Instrument_FrozenCommission_set)
    __swig_setmethods__["OpenFrozenCommission"] = _XFinApi_TradeApi.Instrument_OpenFrozenCommission_set
    __swig_getmethods__["OpenFrozenCommission"] = _XFinApi_TradeApi.Instrument_OpenFrozenCommission_get
    if _newclass:
        OpenFrozenCommission = _swig_property(_XFinApi_TradeApi.Instrument_OpenFrozenCommission_get, _XFinApi_TradeApi.Instrument_OpenFrozenCommission_set)
    __swig_setmethods__["CloseFrozenCommission"] = _XFinApi_TradeApi.Instrument_CloseFrozenCommission_set
    __swig_getmethods__["CloseFrozenCommission"] = _XFinApi_TradeApi.Instrument_CloseFrozenCommission_get
    if _newclass:
        CloseFrozenCommission = _swig_property(_XFinApi_TradeApi.Instrument_CloseFrozenCommission_get, _XFinApi_TradeApi.Instrument_CloseFrozenCommission_set)
    __swig_setmethods__["CloseTodayFrozenCommission"] = _XFinApi_TradeApi.Instrument_CloseTodayFrozenCommission_set
    __swig_getmethods__["CloseTodayFrozenCommission"] = _XFinApi_TradeApi.Instrument_CloseTodayFrozenCommission_get
    if _newclass:
        CloseTodayFrozenCommission = _swig_property(_XFinApi_TradeApi.Instrument_CloseTodayFrozenCommission_get, _XFinApi_TradeApi.Instrument_CloseTodayFrozenCommission_set)
    __swig_setmethods__["CloseProfit"] = _XFinApi_TradeApi.Instrument_CloseProfit_set
    __swig_getmethods__["CloseProfit"] = _XFinApi_TradeApi.Instrument_CloseProfit_get
    if _newclass:
        CloseProfit = _swig_property(_XFinApi_TradeApi.Instrument_CloseProfit_get, _XFinApi_TradeApi.Instrument_CloseProfit_set)
    __swig_setmethods__["LongCloseProfit"] = _XFinApi_TradeApi.Instrument_LongCloseProfit_set
    __swig_getmethods__["LongCloseProfit"] = _XFinApi_TradeApi.Instrument_LongCloseProfit_get
    if _newclass:
        LongCloseProfit = _swig_property(_XFinApi_TradeApi.Instrument_LongCloseProfit_get, _XFinApi_TradeApi.Instrument_LongCloseProfit_set)
    __swig_setmethods__["ShortCloseProfit"] = _XFinApi_TradeApi.Instrument_ShortCloseProfit_set
    __swig_getmethods__["ShortCloseProfit"] = _XFinApi_TradeApi.Instrument_ShortCloseProfit_get
    if _newclass:
        ShortCloseProfit = _swig_property(_XFinApi_TradeApi.Instrument_ShortCloseProfit_get, _XFinApi_TradeApi.Instrument_ShortCloseProfit_set)
    __swig_setmethods__["CurrMargin"] = _XFinApi_TradeApi.Instrument_CurrMargin_set
    __swig_getmethods__["CurrMargin"] = _XFinApi_TradeApi.Instrument_CurrMargin_get
    if _newclass:
        CurrMargin = _swig_property(_XFinApi_TradeApi.Instrument_CurrMargin_get, _XFinApi_TradeApi.Instrument_CurrMargin_set)
    __swig_setmethods__["LongCurrMargin"] = _XFinApi_TradeApi.Instrument_LongCurrMargin_set
    __swig_getmethods__["LongCurrMargin"] = _XFinApi_TradeApi.Instrument_LongCurrMargin_get
    if _newclass:
        LongCurrMargin = _swig_property(_XFinApi_TradeApi.Instrument_LongCurrMargin_get, _XFinApi_TradeApi.Instrument_LongCurrMargin_set)
    __swig_setmethods__["ShortCurrMargin"] = _XFinApi_TradeApi.Instrument_ShortCurrMargin_set
    __swig_getmethods__["ShortCurrMargin"] = _XFinApi_TradeApi.Instrument_ShortCurrMargin_get
    if _newclass:
        ShortCurrMargin = _swig_property(_XFinApi_TradeApi.Instrument_ShortCurrMargin_get, _XFinApi_TradeApi.Instrument_ShortCurrMargin_set)
    __swig_setmethods__["Commission"] = _XFinApi_TradeApi.Instrument_Commission_set
    __swig_getmethods__["Commission"] = _XFinApi_TradeApi.Instrument_Commission_get
    if _newclass:
        Commission = _swig_property(_XFinApi_TradeApi.Instrument_Commission_get, _XFinApi_TradeApi.Instrument_Commission_set)
    __swig_setmethods__["OpenCommission"] = _XFinApi_TradeApi.Instrument_OpenCommission_set
    __swig_getmethods__["OpenCommission"] = _XFinApi_TradeApi.Instrument_OpenCommission_get
    if _newclass:
        OpenCommission = _swig_property(_XFinApi_TradeApi.Instrument_OpenCommission_get, _XFinApi_TradeApi.Instrument_OpenCommission_set)
    __swig_setmethods__["CloseCommission"] = _XFinApi_TradeApi.Instrument_CloseCommission_set
    __swig_getmethods__["CloseCommission"] = _XFinApi_TradeApi.Instrument_CloseCommission_get
    if _newclass:
        CloseCommission = _swig_property(_XFinApi_TradeApi.Instrument_CloseCommission_get, _XFinApi_TradeApi.Instrument_CloseCommission_set)
    __swig_setmethods__["CloseTodayCommission"] = _XFinApi_TradeApi.Instrument_CloseTodayCommission_set
    __swig_getmethods__["CloseTodayCommission"] = _XFinApi_TradeApi.Instrument_CloseTodayCommission_get
    if _newclass:
        CloseTodayCommission = _swig_property(_XFinApi_TradeApi.Instrument_CloseTodayCommission_get, _XFinApi_TradeApi.Instrument_CloseTodayCommission_set)
    __swig_setmethods__["PositionProfit"] = _XFinApi_TradeApi.Instrument_PositionProfit_set
    __swig_getmethods__["PositionProfit"] = _XFinApi_TradeApi.Instrument_PositionProfit_get
    if _newclass:
        PositionProfit = _swig_property(_XFinApi_TradeApi.Instrument_PositionProfit_get, _XFinApi_TradeApi.Instrument_PositionProfit_set)
    __swig_setmethods__["LongPositionProfit"] = _XFinApi_TradeApi.Instrument_LongPositionProfit_set
    __swig_getmethods__["LongPositionProfit"] = _XFinApi_TradeApi.Instrument_LongPositionProfit_get
    if _newclass:
        LongPositionProfit = _swig_property(_XFinApi_TradeApi.Instrument_LongPositionProfit_get, _XFinApi_TradeApi.Instrument_LongPositionProfit_set)
    __swig_setmethods__["ShortPositionProfit"] = _XFinApi_TradeApi.Instrument_ShortPositionProfit_set
    __swig_getmethods__["ShortPositionProfit"] = _XFinApi_TradeApi.Instrument_ShortPositionProfit_get
    if _newclass:
        ShortPositionProfit = _swig_property(_XFinApi_TradeApi.Instrument_ShortPositionProfit_get, _XFinApi_TradeApi.Instrument_ShortPositionProfit_set)
Instrument_swigregister = _XFinApi_TradeApi.Instrument_swigregister
Instrument_swigregister(Instrument)

class MarketListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_MarketListener
    __del__ = lambda self: None

    def OnNotify(self, notifyParams: 'NotifyParams') -> "void":
        return _XFinApi_TradeApi.MarketListener_OnNotify(self, notifyParams)

    def OnSubscribed(self, instInfo: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.MarketListener_OnSubscribed(self, instInfo)

    def OnUnsubscribed(self, instInfo: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.MarketListener_OnUnsubscribed(self, instInfo)

    def OnTick(self, tick: 'Tick') -> "void":
        return _XFinApi_TradeApi.MarketListener_OnTick(self, tick)

    def __init__(self):
        if self.__class__ == MarketListener:
            _self = None
        else:
            _self = self
        this = _XFinApi_TradeApi.new_MarketListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _XFinApi_TradeApi.disown_MarketListener(self)
        return weakref_proxy(self)
MarketListener_swigregister = _XFinApi_TradeApi.MarketListener_swigregister
MarketListener_swigregister(MarketListener)

class IMarket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMarket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMarket, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_IMarket
    __del__ = lambda self: None

    def Open(self, params: 'OpenParams') -> "void":
        return _XFinApi_TradeApi.IMarket_Open(self, params)

    def Close(self) -> "void":
        return _XFinApi_TradeApi.IMarket_Close(self)

    def Subscribe(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.IMarket_Subscribe(self, params)

    def Unsubscribe(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.IMarket_Unsubscribe(self, params)

    def IsOpened(self) -> "bool":
        return _XFinApi_TradeApi.IMarket_IsOpened(self)

    def SetListener(self, listener: 'MarketListener') -> "void":
        return _XFinApi_TradeApi.IMarket_SetListener(self, listener)

    def GetOpenParams(self) -> "XFinApi::TradeApi::OpenParams const &":
        return _XFinApi_TradeApi.IMarket_GetOpenParams(self)

    def Version(self, type: 'int'=0) -> "char const *":
        return _XFinApi_TradeApi.IMarket_Version(self, type)
IMarket_swigregister = _XFinApi_TradeApi.IMarket_swigregister
IMarket_swigregister(IMarket)


def XFinApi_CreateMarketApi(path: 'char const *') -> "int *":
    return _XFinApi_TradeApi.XFinApi_CreateMarketApi(path)
XFinApi_CreateMarketApi = _XFinApi_TradeApi.XFinApi_CreateMarketApi

def XFinApi_ReleaseMarketApi(ptr: 'IMarket') -> "void":
    return _XFinApi_TradeApi.XFinApi_ReleaseMarketApi(ptr)
XFinApi_ReleaseMarketApi = _XFinApi_TradeApi.XFinApi_ReleaseMarketApi
class Order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Order, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_Order
    __del__ = lambda self: None
    __swig_setmethods__["InvestorID"] = _XFinApi_TradeApi.Order_InvestorID_set
    __swig_getmethods__["InvestorID"] = _XFinApi_TradeApi.Order_InvestorID_get
    if _newclass:
        InvestorID = _swig_property(_XFinApi_TradeApi.Order_InvestorID_get, _XFinApi_TradeApi.Order_InvestorID_set)
    __swig_setmethods__["BrokerID"] = _XFinApi_TradeApi.Order_BrokerID_set
    __swig_getmethods__["BrokerID"] = _XFinApi_TradeApi.Order_BrokerID_get
    if _newclass:
        BrokerID = _swig_property(_XFinApi_TradeApi.Order_BrokerID_get, _XFinApi_TradeApi.Order_BrokerID_set)
    __swig_setmethods__["ExchangeID"] = _XFinApi_TradeApi.Order_ExchangeID_set
    __swig_getmethods__["ExchangeID"] = _XFinApi_TradeApi.Order_ExchangeID_get
    if _newclass:
        ExchangeID = _swig_property(_XFinApi_TradeApi.Order_ExchangeID_get, _XFinApi_TradeApi.Order_ExchangeID_set)
    __swig_setmethods__["ProductType"] = _XFinApi_TradeApi.Order_ProductType_set
    __swig_getmethods__["ProductType"] = _XFinApi_TradeApi.Order_ProductType_get
    if _newclass:
        ProductType = _swig_property(_XFinApi_TradeApi.Order_ProductType_get, _XFinApi_TradeApi.Order_ProductType_set)
    __swig_setmethods__["ProductID"] = _XFinApi_TradeApi.Order_ProductID_set
    __swig_getmethods__["ProductID"] = _XFinApi_TradeApi.Order_ProductID_get
    if _newclass:
        ProductID = _swig_property(_XFinApi_TradeApi.Order_ProductID_get, _XFinApi_TradeApi.Order_ProductID_set)
    __swig_setmethods__["InstrumentID"] = _XFinApi_TradeApi.Order_InstrumentID_set
    __swig_getmethods__["InstrumentID"] = _XFinApi_TradeApi.Order_InstrumentID_get
    if _newclass:
        InstrumentID = _swig_property(_XFinApi_TradeApi.Order_InstrumentID_get, _XFinApi_TradeApi.Order_InstrumentID_set)
    __swig_setmethods__["OrderTime"] = _XFinApi_TradeApi.Order_OrderTime_set
    __swig_getmethods__["OrderTime"] = _XFinApi_TradeApi.Order_OrderTime_get
    if _newclass:
        OrderTime = _swig_property(_XFinApi_TradeApi.Order_OrderTime_get, _XFinApi_TradeApi.Order_OrderTime_set)
    __swig_setmethods__["CancelTime"] = _XFinApi_TradeApi.Order_CancelTime_set
    __swig_getmethods__["CancelTime"] = _XFinApi_TradeApi.Order_CancelTime_get
    if _newclass:
        CancelTime = _swig_property(_XFinApi_TradeApi.Order_CancelTime_get, _XFinApi_TradeApi.Order_CancelTime_set)
    __swig_setmethods__["TradingDay"] = _XFinApi_TradeApi.Order_TradingDay_set
    __swig_getmethods__["TradingDay"] = _XFinApi_TradeApi.Order_TradingDay_get
    if _newclass:
        TradingDay = _swig_property(_XFinApi_TradeApi.Order_TradingDay_get, _XFinApi_TradeApi.Order_TradingDay_set)
    __swig_setmethods__["UpdateTime"] = _XFinApi_TradeApi.Order_UpdateTime_set
    __swig_getmethods__["UpdateTime"] = _XFinApi_TradeApi.Order_UpdateTime_get
    if _newclass:
        UpdateTime = _swig_property(_XFinApi_TradeApi.Order_UpdateTime_get, _XFinApi_TradeApi.Order_UpdateTime_set)
    __swig_setmethods__["StatusMsg"] = _XFinApi_TradeApi.Order_StatusMsg_set
    __swig_getmethods__["StatusMsg"] = _XFinApi_TradeApi.Order_StatusMsg_get
    if _newclass:
        StatusMsg = _swig_property(_XFinApi_TradeApi.Order_StatusMsg_get, _XFinApi_TradeApi.Order_StatusMsg_set)
    __swig_setmethods__["OrderRef"] = _XFinApi_TradeApi.Order_OrderRef_set
    __swig_getmethods__["OrderRef"] = _XFinApi_TradeApi.Order_OrderRef_get
    if _newclass:
        OrderRef = _swig_property(_XFinApi_TradeApi.Order_OrderRef_get, _XFinApi_TradeApi.Order_OrderRef_set)
    __swig_setmethods__["OrderID"] = _XFinApi_TradeApi.Order_OrderID_set
    __swig_getmethods__["OrderID"] = _XFinApi_TradeApi.Order_OrderID_get
    if _newclass:
        OrderID = _swig_property(_XFinApi_TradeApi.Order_OrderID_get, _XFinApi_TradeApi.Order_OrderID_set)
    __swig_setmethods__["FrontID"] = _XFinApi_TradeApi.Order_FrontID_set
    __swig_getmethods__["FrontID"] = _XFinApi_TradeApi.Order_FrontID_get
    if _newclass:
        FrontID = _swig_property(_XFinApi_TradeApi.Order_FrontID_get, _XFinApi_TradeApi.Order_FrontID_set)
    __swig_setmethods__["SessionID"] = _XFinApi_TradeApi.Order_SessionID_set
    __swig_getmethods__["SessionID"] = _XFinApi_TradeApi.Order_SessionID_get
    if _newclass:
        SessionID = _swig_property(_XFinApi_TradeApi.Order_SessionID_get, _XFinApi_TradeApi.Order_SessionID_set)
    __swig_setmethods__["OrderLocalNo"] = _XFinApi_TradeApi.Order_OrderLocalNo_set
    __swig_getmethods__["OrderLocalNo"] = _XFinApi_TradeApi.Order_OrderLocalNo_get
    if _newclass:
        OrderLocalNo = _swig_property(_XFinApi_TradeApi.Order_OrderLocalNo_get, _XFinApi_TradeApi.Order_OrderLocalNo_set)
    __swig_setmethods__["Price"] = _XFinApi_TradeApi.Order_Price_set
    __swig_getmethods__["Price"] = _XFinApi_TradeApi.Order_Price_get
    if _newclass:
        Price = _swig_property(_XFinApi_TradeApi.Order_Price_get, _XFinApi_TradeApi.Order_Price_set)
    __swig_setmethods__["Volume"] = _XFinApi_TradeApi.Order_Volume_set
    __swig_getmethods__["Volume"] = _XFinApi_TradeApi.Order_Volume_get
    if _newclass:
        Volume = _swig_property(_XFinApi_TradeApi.Order_Volume_get, _XFinApi_TradeApi.Order_Volume_set)
    __swig_setmethods__["NoTradedVolume"] = _XFinApi_TradeApi.Order_NoTradedVolume_set
    __swig_getmethods__["NoTradedVolume"] = _XFinApi_TradeApi.Order_NoTradedVolume_get
    if _newclass:
        NoTradedVolume = _swig_property(_XFinApi_TradeApi.Order_NoTradedVolume_get, _XFinApi_TradeApi.Order_NoTradedVolume_set)
    __swig_setmethods__["Status"] = _XFinApi_TradeApi.Order_Status_set
    __swig_getmethods__["Status"] = _XFinApi_TradeApi.Order_Status_get
    if _newclass:
        Status = _swig_property(_XFinApi_TradeApi.Order_Status_get, _XFinApi_TradeApi.Order_Status_set)
    __swig_setmethods__["Direction"] = _XFinApi_TradeApi.Order_Direction_set
    __swig_getmethods__["Direction"] = _XFinApi_TradeApi.Order_Direction_get
    if _newclass:
        Direction = _swig_property(_XFinApi_TradeApi.Order_Direction_get, _XFinApi_TradeApi.Order_Direction_set)
    __swig_setmethods__["OpenCloseType"] = _XFinApi_TradeApi.Order_OpenCloseType_set
    __swig_getmethods__["OpenCloseType"] = _XFinApi_TradeApi.Order_OpenCloseType_get
    if _newclass:
        OpenCloseType = _swig_property(_XFinApi_TradeApi.Order_OpenCloseType_get, _XFinApi_TradeApi.Order_OpenCloseType_set)
    __swig_setmethods__["PriceCond"] = _XFinApi_TradeApi.Order_PriceCond_set
    __swig_getmethods__["PriceCond"] = _XFinApi_TradeApi.Order_PriceCond_get
    if _newclass:
        PriceCond = _swig_property(_XFinApi_TradeApi.Order_PriceCond_get, _XFinApi_TradeApi.Order_PriceCond_set)
    __swig_setmethods__["TimeCond"] = _XFinApi_TradeApi.Order_TimeCond_set
    __swig_getmethods__["TimeCond"] = _XFinApi_TradeApi.Order_TimeCond_get
    if _newclass:
        TimeCond = _swig_property(_XFinApi_TradeApi.Order_TimeCond_get, _XFinApi_TradeApi.Order_TimeCond_set)
    __swig_setmethods__["VolumeCond"] = _XFinApi_TradeApi.Order_VolumeCond_set
    __swig_getmethods__["VolumeCond"] = _XFinApi_TradeApi.Order_VolumeCond_get
    if _newclass:
        VolumeCond = _swig_property(_XFinApi_TradeApi.Order_VolumeCond_get, _XFinApi_TradeApi.Order_VolumeCond_set)
    __swig_setmethods__["HedgeType"] = _XFinApi_TradeApi.Order_HedgeType_set
    __swig_getmethods__["HedgeType"] = _XFinApi_TradeApi.Order_HedgeType_get
    if _newclass:
        HedgeType = _swig_property(_XFinApi_TradeApi.Order_HedgeType_get, _XFinApi_TradeApi.Order_HedgeType_set)
    __swig_setmethods__["OrderType"] = _XFinApi_TradeApi.Order_OrderType_set
    __swig_getmethods__["OrderType"] = _XFinApi_TradeApi.Order_OrderType_get
    if _newclass:
        OrderType = _swig_property(_XFinApi_TradeApi.Order_OrderType_get, _XFinApi_TradeApi.Order_OrderType_set)
    __swig_setmethods__["ActionType"] = _XFinApi_TradeApi.Order_ActionType_set
    __swig_getmethods__["ActionType"] = _XFinApi_TradeApi.Order_ActionType_get
    if _newclass:
        ActionType = _swig_property(_XFinApi_TradeApi.Order_ActionType_get, _XFinApi_TradeApi.Order_ActionType_set)
    __swig_setmethods__["ExecResult"] = _XFinApi_TradeApi.Order_ExecResult_set
    __swig_getmethods__["ExecResult"] = _XFinApi_TradeApi.Order_ExecResult_get
    if _newclass:
        ExecResult = _swig_property(_XFinApi_TradeApi.Order_ExecResult_get, _XFinApi_TradeApi.Order_ExecResult_set)
    __swig_setmethods__["ContingentCond"] = _XFinApi_TradeApi.Order_ContingentCond_set
    __swig_getmethods__["ContingentCond"] = _XFinApi_TradeApi.Order_ContingentCond_get
    if _newclass:
        ContingentCond = _swig_property(_XFinApi_TradeApi.Order_ContingentCond_get, _XFinApi_TradeApi.Order_ContingentCond_set)
    __swig_setmethods__["FrozenMargin"] = _XFinApi_TradeApi.Order_FrozenMargin_set
    __swig_getmethods__["FrozenMargin"] = _XFinApi_TradeApi.Order_FrozenMargin_get
    if _newclass:
        FrozenMargin = _swig_property(_XFinApi_TradeApi.Order_FrozenMargin_get, _XFinApi_TradeApi.Order_FrozenMargin_set)
    __swig_setmethods__["FrozenCommission"] = _XFinApi_TradeApi.Order_FrozenCommission_set
    __swig_getmethods__["FrozenCommission"] = _XFinApi_TradeApi.Order_FrozenCommission_get
    if _newclass:
        FrozenCommission = _swig_property(_XFinApi_TradeApi.Order_FrozenCommission_get, _XFinApi_TradeApi.Order_FrozenCommission_set)
    __swig_setmethods__["ShowVolume"] = _XFinApi_TradeApi.Order_ShowVolume_set
    __swig_getmethods__["ShowVolume"] = _XFinApi_TradeApi.Order_ShowVolume_get
    if _newclass:
        ShowVolume = _swig_property(_XFinApi_TradeApi.Order_ShowVolume_get, _XFinApi_TradeApi.Order_ShowVolume_set)
    __swig_setmethods__["MinVolume"] = _XFinApi_TradeApi.Order_MinVolume_set
    __swig_getmethods__["MinVolume"] = _XFinApi_TradeApi.Order_MinVolume_get
    if _newclass:
        MinVolume = _swig_property(_XFinApi_TradeApi.Order_MinVolume_get, _XFinApi_TradeApi.Order_MinVolume_set)
    __swig_setmethods__["PricePrecision"] = _XFinApi_TradeApi.Order_PricePrecision_set
    __swig_getmethods__["PricePrecision"] = _XFinApi_TradeApi.Order_PricePrecision_get
    if _newclass:
        PricePrecision = _swig_property(_XFinApi_TradeApi.Order_PricePrecision_get, _XFinApi_TradeApi.Order_PricePrecision_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_Order()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Order_swigregister = _XFinApi_TradeApi.Order_swigregister
Order_swigregister(Order)

class TradeOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TradeOrder, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_TradeOrder
    __del__ = lambda self: None
    __swig_setmethods__["ExchangeID"] = _XFinApi_TradeApi.TradeOrder_ExchangeID_set
    __swig_getmethods__["ExchangeID"] = _XFinApi_TradeApi.TradeOrder_ExchangeID_get
    if _newclass:
        ExchangeID = _swig_property(_XFinApi_TradeApi.TradeOrder_ExchangeID_get, _XFinApi_TradeApi.TradeOrder_ExchangeID_set)
    __swig_setmethods__["ProductID"] = _XFinApi_TradeApi.TradeOrder_ProductID_set
    __swig_getmethods__["ProductID"] = _XFinApi_TradeApi.TradeOrder_ProductID_get
    if _newclass:
        ProductID = _swig_property(_XFinApi_TradeApi.TradeOrder_ProductID_get, _XFinApi_TradeApi.TradeOrder_ProductID_set)
    __swig_setmethods__["InstrumentID"] = _XFinApi_TradeApi.TradeOrder_InstrumentID_set
    __swig_getmethods__["InstrumentID"] = _XFinApi_TradeApi.TradeOrder_InstrumentID_get
    if _newclass:
        InstrumentID = _swig_property(_XFinApi_TradeApi.TradeOrder_InstrumentID_get, _XFinApi_TradeApi.TradeOrder_InstrumentID_set)
    __swig_setmethods__["TradeTime"] = _XFinApi_TradeApi.TradeOrder_TradeTime_set
    __swig_getmethods__["TradeTime"] = _XFinApi_TradeApi.TradeOrder_TradeTime_get
    if _newclass:
        TradeTime = _swig_property(_XFinApi_TradeApi.TradeOrder_TradeTime_get, _XFinApi_TradeApi.TradeOrder_TradeTime_set)
    __swig_setmethods__["TradingDay"] = _XFinApi_TradeApi.TradeOrder_TradingDay_set
    __swig_getmethods__["TradingDay"] = _XFinApi_TradeApi.TradeOrder_TradingDay_get
    if _newclass:
        TradingDay = _swig_property(_XFinApi_TradeApi.TradeOrder_TradingDay_get, _XFinApi_TradeApi.TradeOrder_TradingDay_set)
    __swig_setmethods__["UpdateTime"] = _XFinApi_TradeApi.TradeOrder_UpdateTime_set
    __swig_getmethods__["UpdateTime"] = _XFinApi_TradeApi.TradeOrder_UpdateTime_get
    if _newclass:
        UpdateTime = _swig_property(_XFinApi_TradeApi.TradeOrder_UpdateTime_get, _XFinApi_TradeApi.TradeOrder_UpdateTime_set)
    __swig_setmethods__["OrderID"] = _XFinApi_TradeApi.TradeOrder_OrderID_set
    __swig_getmethods__["OrderID"] = _XFinApi_TradeApi.TradeOrder_OrderID_get
    if _newclass:
        OrderID = _swig_property(_XFinApi_TradeApi.TradeOrder_OrderID_get, _XFinApi_TradeApi.TradeOrder_OrderID_set)
    __swig_setmethods__["TradeID"] = _XFinApi_TradeApi.TradeOrder_TradeID_set
    __swig_getmethods__["TradeID"] = _XFinApi_TradeApi.TradeOrder_TradeID_get
    if _newclass:
        TradeID = _swig_property(_XFinApi_TradeApi.TradeOrder_TradeID_get, _XFinApi_TradeApi.TradeOrder_TradeID_set)
    __swig_setmethods__["Price"] = _XFinApi_TradeApi.TradeOrder_Price_set
    __swig_getmethods__["Price"] = _XFinApi_TradeApi.TradeOrder_Price_get
    if _newclass:
        Price = _swig_property(_XFinApi_TradeApi.TradeOrder_Price_get, _XFinApi_TradeApi.TradeOrder_Price_set)
    __swig_setmethods__["Volume"] = _XFinApi_TradeApi.TradeOrder_Volume_set
    __swig_getmethods__["Volume"] = _XFinApi_TradeApi.TradeOrder_Volume_get
    if _newclass:
        Volume = _swig_property(_XFinApi_TradeApi.TradeOrder_Volume_get, _XFinApi_TradeApi.TradeOrder_Volume_set)
    __swig_setmethods__["UnCloseVolume"] = _XFinApi_TradeApi.TradeOrder_UnCloseVolume_set
    __swig_getmethods__["UnCloseVolume"] = _XFinApi_TradeApi.TradeOrder_UnCloseVolume_get
    if _newclass:
        UnCloseVolume = _swig_property(_XFinApi_TradeApi.TradeOrder_UnCloseVolume_get, _XFinApi_TradeApi.TradeOrder_UnCloseVolume_set)
    __swig_setmethods__["Direction"] = _XFinApi_TradeApi.TradeOrder_Direction_set
    __swig_getmethods__["Direction"] = _XFinApi_TradeApi.TradeOrder_Direction_get
    if _newclass:
        Direction = _swig_property(_XFinApi_TradeApi.TradeOrder_Direction_get, _XFinApi_TradeApi.TradeOrder_Direction_set)
    __swig_setmethods__["OpenCloseType"] = _XFinApi_TradeApi.TradeOrder_OpenCloseType_set
    __swig_getmethods__["OpenCloseType"] = _XFinApi_TradeApi.TradeOrder_OpenCloseType_get
    if _newclass:
        OpenCloseType = _swig_property(_XFinApi_TradeApi.TradeOrder_OpenCloseType_get, _XFinApi_TradeApi.TradeOrder_OpenCloseType_set)
    __swig_setmethods__["HedgeType"] = _XFinApi_TradeApi.TradeOrder_HedgeType_set
    __swig_getmethods__["HedgeType"] = _XFinApi_TradeApi.TradeOrder_HedgeType_get
    if _newclass:
        HedgeType = _swig_property(_XFinApi_TradeApi.TradeOrder_HedgeType_get, _XFinApi_TradeApi.TradeOrder_HedgeType_set)
    __swig_setmethods__["IsYesterdayTrade"] = _XFinApi_TradeApi.TradeOrder_IsYesterdayTrade_set
    __swig_getmethods__["IsYesterdayTrade"] = _XFinApi_TradeApi.TradeOrder_IsYesterdayTrade_get
    if _newclass:
        IsYesterdayTrade = _swig_property(_XFinApi_TradeApi.TradeOrder_IsYesterdayTrade_get, _XFinApi_TradeApi.TradeOrder_IsYesterdayTrade_set)
    __swig_setmethods__["CloseProfit"] = _XFinApi_TradeApi.TradeOrder_CloseProfit_set
    __swig_getmethods__["CloseProfit"] = _XFinApi_TradeApi.TradeOrder_CloseProfit_get
    if _newclass:
        CloseProfit = _swig_property(_XFinApi_TradeApi.TradeOrder_CloseProfit_get, _XFinApi_TradeApi.TradeOrder_CloseProfit_set)
    __swig_setmethods__["CurrMargin"] = _XFinApi_TradeApi.TradeOrder_CurrMargin_set
    __swig_getmethods__["CurrMargin"] = _XFinApi_TradeApi.TradeOrder_CurrMargin_get
    if _newclass:
        CurrMargin = _swig_property(_XFinApi_TradeApi.TradeOrder_CurrMargin_get, _XFinApi_TradeApi.TradeOrder_CurrMargin_set)
    __swig_setmethods__["Commission"] = _XFinApi_TradeApi.TradeOrder_Commission_set
    __swig_getmethods__["Commission"] = _XFinApi_TradeApi.TradeOrder_Commission_get
    if _newclass:
        Commission = _swig_property(_XFinApi_TradeApi.TradeOrder_Commission_get, _XFinApi_TradeApi.TradeOrder_Commission_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_TradeOrder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TradeOrder_swigregister = _XFinApi_TradeApi.TradeOrder_swigregister
TradeOrder_swigregister(TradeOrder)

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_Position
    __del__ = lambda self: None
    __swig_setmethods__["InvestorID"] = _XFinApi_TradeApi.Position_InvestorID_set
    __swig_getmethods__["InvestorID"] = _XFinApi_TradeApi.Position_InvestorID_get
    if _newclass:
        InvestorID = _swig_property(_XFinApi_TradeApi.Position_InvestorID_get, _XFinApi_TradeApi.Position_InvestorID_set)
    __swig_setmethods__["BrokerID"] = _XFinApi_TradeApi.Position_BrokerID_set
    __swig_getmethods__["BrokerID"] = _XFinApi_TradeApi.Position_BrokerID_get
    if _newclass:
        BrokerID = _swig_property(_XFinApi_TradeApi.Position_BrokerID_get, _XFinApi_TradeApi.Position_BrokerID_set)
    __swig_setmethods__["ExchangeID"] = _XFinApi_TradeApi.Position_ExchangeID_set
    __swig_getmethods__["ExchangeID"] = _XFinApi_TradeApi.Position_ExchangeID_get
    if _newclass:
        ExchangeID = _swig_property(_XFinApi_TradeApi.Position_ExchangeID_get, _XFinApi_TradeApi.Position_ExchangeID_set)
    __swig_setmethods__["ProductID"] = _XFinApi_TradeApi.Position_ProductID_set
    __swig_getmethods__["ProductID"] = _XFinApi_TradeApi.Position_ProductID_get
    if _newclass:
        ProductID = _swig_property(_XFinApi_TradeApi.Position_ProductID_get, _XFinApi_TradeApi.Position_ProductID_set)
    __swig_setmethods__["InstrumentID"] = _XFinApi_TradeApi.Position_InstrumentID_set
    __swig_getmethods__["InstrumentID"] = _XFinApi_TradeApi.Position_InstrumentID_get
    if _newclass:
        InstrumentID = _swig_property(_XFinApi_TradeApi.Position_InstrumentID_get, _XFinApi_TradeApi.Position_InstrumentID_set)
    __swig_setmethods__["PreSettlementPrice"] = _XFinApi_TradeApi.Position_PreSettlementPrice_set
    __swig_getmethods__["PreSettlementPrice"] = _XFinApi_TradeApi.Position_PreSettlementPrice_get
    if _newclass:
        PreSettlementPrice = _swig_property(_XFinApi_TradeApi.Position_PreSettlementPrice_get, _XFinApi_TradeApi.Position_PreSettlementPrice_set)
    __swig_setmethods__["PositionToday"] = _XFinApi_TradeApi.Position_PositionToday_set
    __swig_getmethods__["PositionToday"] = _XFinApi_TradeApi.Position_PositionToday_get
    if _newclass:
        PositionToday = _swig_property(_XFinApi_TradeApi.Position_PositionToday_get, _XFinApi_TradeApi.Position_PositionToday_set)
    __swig_setmethods__["PositionYesterday"] = _XFinApi_TradeApi.Position_PositionYesterday_set
    __swig_getmethods__["PositionYesterday"] = _XFinApi_TradeApi.Position_PositionYesterday_get
    if _newclass:
        PositionYesterday = _swig_property(_XFinApi_TradeApi.Position_PositionYesterday_get, _XFinApi_TradeApi.Position_PositionYesterday_set)
    __swig_setmethods__["Direction"] = _XFinApi_TradeApi.Position_Direction_set
    __swig_getmethods__["Direction"] = _XFinApi_TradeApi.Position_Direction_get
    if _newclass:
        Direction = _swig_property(_XFinApi_TradeApi.Position_Direction_get, _XFinApi_TradeApi.Position_Direction_set)
    __swig_setmethods__["NetPosition"] = _XFinApi_TradeApi.Position_NetPosition_set
    __swig_getmethods__["NetPosition"] = _XFinApi_TradeApi.Position_NetPosition_get
    if _newclass:
        NetPosition = _swig_property(_XFinApi_TradeApi.Position_NetPosition_get, _XFinApi_TradeApi.Position_NetPosition_set)
    __swig_setmethods__["BuyPosition"] = _XFinApi_TradeApi.Position_BuyPosition_set
    __swig_getmethods__["BuyPosition"] = _XFinApi_TradeApi.Position_BuyPosition_get
    if _newclass:
        BuyPosition = _swig_property(_XFinApi_TradeApi.Position_BuyPosition_get, _XFinApi_TradeApi.Position_BuyPosition_set)
    __swig_setmethods__["SellPosition"] = _XFinApi_TradeApi.Position_SellPosition_set
    __swig_getmethods__["SellPosition"] = _XFinApi_TradeApi.Position_SellPosition_get
    if _newclass:
        SellPosition = _swig_property(_XFinApi_TradeApi.Position_SellPosition_get, _XFinApi_TradeApi.Position_SellPosition_set)
    __swig_setmethods__["PositionYesDirection"] = _XFinApi_TradeApi.Position_PositionYesDirection_set
    __swig_getmethods__["PositionYesDirection"] = _XFinApi_TradeApi.Position_PositionYesDirection_get
    if _newclass:
        PositionYesDirection = _swig_property(_XFinApi_TradeApi.Position_PositionYesDirection_get, _XFinApi_TradeApi.Position_PositionYesDirection_set)
    __swig_setmethods__["YdPosition"] = _XFinApi_TradeApi.Position_YdPosition_set
    __swig_getmethods__["YdPosition"] = _XFinApi_TradeApi.Position_YdPosition_get
    if _newclass:
        YdPosition = _swig_property(_XFinApi_TradeApi.Position_YdPosition_get, _XFinApi_TradeApi.Position_YdPosition_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_Position()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Position_swigregister = _XFinApi_TradeApi.Position_swigregister
Position_swigregister(Position)

class Account(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Account, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Account, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_Account
    __del__ = lambda self: None
    __swig_setmethods__["AccountID"] = _XFinApi_TradeApi.Account_AccountID_set
    __swig_getmethods__["AccountID"] = _XFinApi_TradeApi.Account_AccountID_get
    if _newclass:
        AccountID = _swig_property(_XFinApi_TradeApi.Account_AccountID_get, _XFinApi_TradeApi.Account_AccountID_set)
    __swig_setmethods__["PreBalance"] = _XFinApi_TradeApi.Account_PreBalance_set
    __swig_getmethods__["PreBalance"] = _XFinApi_TradeApi.Account_PreBalance_get
    if _newclass:
        PreBalance = _swig_property(_XFinApi_TradeApi.Account_PreBalance_get, _XFinApi_TradeApi.Account_PreBalance_set)
    __swig_setmethods__["PreCredit"] = _XFinApi_TradeApi.Account_PreCredit_set
    __swig_getmethods__["PreCredit"] = _XFinApi_TradeApi.Account_PreCredit_get
    if _newclass:
        PreCredit = _swig_property(_XFinApi_TradeApi.Account_PreCredit_get, _XFinApi_TradeApi.Account_PreCredit_set)
    __swig_setmethods__["PreMortgage"] = _XFinApi_TradeApi.Account_PreMortgage_set
    __swig_getmethods__["PreMortgage"] = _XFinApi_TradeApi.Account_PreMortgage_get
    if _newclass:
        PreMortgage = _swig_property(_XFinApi_TradeApi.Account_PreMortgage_get, _XFinApi_TradeApi.Account_PreMortgage_set)
    __swig_setmethods__["Mortgage"] = _XFinApi_TradeApi.Account_Mortgage_set
    __swig_getmethods__["Mortgage"] = _XFinApi_TradeApi.Account_Mortgage_get
    if _newclass:
        Mortgage = _swig_property(_XFinApi_TradeApi.Account_Mortgage_get, _XFinApi_TradeApi.Account_Mortgage_set)
    __swig_setmethods__["Withdraw"] = _XFinApi_TradeApi.Account_Withdraw_set
    __swig_getmethods__["Withdraw"] = _XFinApi_TradeApi.Account_Withdraw_get
    if _newclass:
        Withdraw = _swig_property(_XFinApi_TradeApi.Account_Withdraw_get, _XFinApi_TradeApi.Account_Withdraw_set)
    __swig_setmethods__["Deposit"] = _XFinApi_TradeApi.Account_Deposit_set
    __swig_getmethods__["Deposit"] = _XFinApi_TradeApi.Account_Deposit_get
    if _newclass:
        Deposit = _swig_property(_XFinApi_TradeApi.Account_Deposit_get, _XFinApi_TradeApi.Account_Deposit_set)
    __swig_setmethods__["DeliveryMargin"] = _XFinApi_TradeApi.Account_DeliveryMargin_set
    __swig_getmethods__["DeliveryMargin"] = _XFinApi_TradeApi.Account_DeliveryMargin_get
    if _newclass:
        DeliveryMargin = _swig_property(_XFinApi_TradeApi.Account_DeliveryMargin_get, _XFinApi_TradeApi.Account_DeliveryMargin_set)
    __swig_setmethods__["FrozenMargin"] = _XFinApi_TradeApi.Account_FrozenMargin_set
    __swig_getmethods__["FrozenMargin"] = _XFinApi_TradeApi.Account_FrozenMargin_get
    if _newclass:
        FrozenMargin = _swig_property(_XFinApi_TradeApi.Account_FrozenMargin_get, _XFinApi_TradeApi.Account_FrozenMargin_set)
    __swig_setmethods__["FrozenCommission"] = _XFinApi_TradeApi.Account_FrozenCommission_set
    __swig_getmethods__["FrozenCommission"] = _XFinApi_TradeApi.Account_FrozenCommission_get
    if _newclass:
        FrozenCommission = _swig_property(_XFinApi_TradeApi.Account_FrozenCommission_get, _XFinApi_TradeApi.Account_FrozenCommission_set)
    __swig_setmethods__["FrozenCash"] = _XFinApi_TradeApi.Account_FrozenCash_set
    __swig_getmethods__["FrozenCash"] = _XFinApi_TradeApi.Account_FrozenCash_get
    if _newclass:
        FrozenCash = _swig_property(_XFinApi_TradeApi.Account_FrozenCash_get, _XFinApi_TradeApi.Account_FrozenCash_set)
    __swig_setmethods__["CurrMargin"] = _XFinApi_TradeApi.Account_CurrMargin_set
    __swig_getmethods__["CurrMargin"] = _XFinApi_TradeApi.Account_CurrMargin_get
    if _newclass:
        CurrMargin = _swig_property(_XFinApi_TradeApi.Account_CurrMargin_get, _XFinApi_TradeApi.Account_CurrMargin_set)
    __swig_setmethods__["Commission"] = _XFinApi_TradeApi.Account_Commission_set
    __swig_getmethods__["Commission"] = _XFinApi_TradeApi.Account_Commission_get
    if _newclass:
        Commission = _swig_property(_XFinApi_TradeApi.Account_Commission_get, _XFinApi_TradeApi.Account_Commission_set)
    __swig_setmethods__["CloseProfit"] = _XFinApi_TradeApi.Account_CloseProfit_set
    __swig_getmethods__["CloseProfit"] = _XFinApi_TradeApi.Account_CloseProfit_get
    if _newclass:
        CloseProfit = _swig_property(_XFinApi_TradeApi.Account_CloseProfit_get, _XFinApi_TradeApi.Account_CloseProfit_set)
    __swig_setmethods__["PositionProfit"] = _XFinApi_TradeApi.Account_PositionProfit_set
    __swig_getmethods__["PositionProfit"] = _XFinApi_TradeApi.Account_PositionProfit_get
    if _newclass:
        PositionProfit = _swig_property(_XFinApi_TradeApi.Account_PositionProfit_get, _XFinApi_TradeApi.Account_PositionProfit_set)
    __swig_setmethods__["Available"] = _XFinApi_TradeApi.Account_Available_set
    __swig_getmethods__["Available"] = _XFinApi_TradeApi.Account_Available_get
    if _newclass:
        Available = _swig_property(_XFinApi_TradeApi.Account_Available_get, _XFinApi_TradeApi.Account_Available_set)
    __swig_setmethods__["Balance"] = _XFinApi_TradeApi.Account_Balance_set
    __swig_getmethods__["Balance"] = _XFinApi_TradeApi.Account_Balance_get
    if _newclass:
        Balance = _swig_property(_XFinApi_TradeApi.Account_Balance_get, _XFinApi_TradeApi.Account_Balance_set)
    __swig_setmethods__["StaticRights"] = _XFinApi_TradeApi.Account_StaticRights_set
    __swig_getmethods__["StaticRights"] = _XFinApi_TradeApi.Account_StaticRights_get
    if _newclass:
        StaticRights = _swig_property(_XFinApi_TradeApi.Account_StaticRights_get, _XFinApi_TradeApi.Account_StaticRights_set)
    __swig_setmethods__["ChangingRights"] = _XFinApi_TradeApi.Account_ChangingRights_set
    __swig_getmethods__["ChangingRights"] = _XFinApi_TradeApi.Account_ChangingRights_get
    if _newclass:
        ChangingRights = _swig_property(_XFinApi_TradeApi.Account_ChangingRights_get, _XFinApi_TradeApi.Account_ChangingRights_set)
    __swig_setmethods__["NetAssetValue"] = _XFinApi_TradeApi.Account_NetAssetValue_set
    __swig_getmethods__["NetAssetValue"] = _XFinApi_TradeApi.Account_NetAssetValue_get
    if _newclass:
        NetAssetValue = _swig_property(_XFinApi_TradeApi.Account_NetAssetValue_get, _XFinApi_TradeApi.Account_NetAssetValue_set)
    __swig_setmethods__["CreditLimit"] = _XFinApi_TradeApi.Account_CreditLimit_set
    __swig_getmethods__["CreditLimit"] = _XFinApi_TradeApi.Account_CreditLimit_get
    if _newclass:
        CreditLimit = _swig_property(_XFinApi_TradeApi.Account_CreditLimit_get, _XFinApi_TradeApi.Account_CreditLimit_set)
    __swig_setmethods__["CashBal"] = _XFinApi_TradeApi.Account_CashBal_set
    __swig_getmethods__["CashBal"] = _XFinApi_TradeApi.Account_CashBal_get
    if _newclass:
        CashBal = _swig_property(_XFinApi_TradeApi.Account_CashBal_get, _XFinApi_TradeApi.Account_CashBal_set)
    __swig_setmethods__["IMargin"] = _XFinApi_TradeApi.Account_IMargin_set
    __swig_getmethods__["IMargin"] = _XFinApi_TradeApi.Account_IMargin_get
    if _newclass:
        IMargin = _swig_property(_XFinApi_TradeApi.Account_IMargin_get, _XFinApi_TradeApi.Account_IMargin_set)
    __swig_setmethods__["MMargin"] = _XFinApi_TradeApi.Account_MMargin_set
    __swig_getmethods__["MMargin"] = _XFinApi_TradeApi.Account_MMargin_get
    if _newclass:
        MMargin = _swig_property(_XFinApi_TradeApi.Account_MMargin_get, _XFinApi_TradeApi.Account_MMargin_set)
    __swig_setmethods__["CommodityPL"] = _XFinApi_TradeApi.Account_CommodityPL_set
    __swig_getmethods__["CommodityPL"] = _XFinApi_TradeApi.Account_CommodityPL_get
    if _newclass:
        CommodityPL = _swig_property(_XFinApi_TradeApi.Account_CommodityPL_get, _XFinApi_TradeApi.Account_CommodityPL_set)
    __swig_setmethods__["PreEquity"] = _XFinApi_TradeApi.Account_PreEquity_set
    __swig_getmethods__["PreEquity"] = _XFinApi_TradeApi.Account_PreEquity_get
    if _newclass:
        PreEquity = _swig_property(_XFinApi_TradeApi.Account_PreEquity_get, _XFinApi_TradeApi.Account_PreEquity_set)
    __swig_setmethods__["PreAvailable"] = _XFinApi_TradeApi.Account_PreAvailable_set
    __swig_getmethods__["PreAvailable"] = _XFinApi_TradeApi.Account_PreAvailable_get
    if _newclass:
        PreAvailable = _swig_property(_XFinApi_TradeApi.Account_PreAvailable_get, _XFinApi_TradeApi.Account_PreAvailable_set)
    __swig_setmethods__["PreMarketEquity"] = _XFinApi_TradeApi.Account_PreMarketEquity_set
    __swig_getmethods__["PreMarketEquity"] = _XFinApi_TradeApi.Account_PreMarketEquity_get
    if _newclass:
        PreMarketEquity = _swig_property(_XFinApi_TradeApi.Account_PreMarketEquity_get, _XFinApi_TradeApi.Account_PreMarketEquity_set)
    __swig_setmethods__["AccountIntialMargin"] = _XFinApi_TradeApi.Account_AccountIntialMargin_set
    __swig_getmethods__["AccountIntialMargin"] = _XFinApi_TradeApi.Account_AccountIntialMargin_get
    if _newclass:
        AccountIntialMargin = _swig_property(_XFinApi_TradeApi.Account_AccountIntialMargin_get, _XFinApi_TradeApi.Account_AccountIntialMargin_set)
    __swig_setmethods__["AccountMaintenanceMargin"] = _XFinApi_TradeApi.Account_AccountMaintenanceMargin_set
    __swig_getmethods__["AccountMaintenanceMargin"] = _XFinApi_TradeApi.Account_AccountMaintenanceMargin_get
    if _newclass:
        AccountMaintenanceMargin = _swig_property(_XFinApi_TradeApi.Account_AccountMaintenanceMargin_get, _XFinApi_TradeApi.Account_AccountMaintenanceMargin_set)
    __swig_setmethods__["Equity"] = _XFinApi_TradeApi.Account_Equity_set
    __swig_getmethods__["Equity"] = _XFinApi_TradeApi.Account_Equity_get
    if _newclass:
        Equity = _swig_property(_XFinApi_TradeApi.Account_Equity_get, _XFinApi_TradeApi.Account_Equity_set)
    __swig_setmethods__["CanDraw"] = _XFinApi_TradeApi.Account_CanDraw_set
    __swig_getmethods__["CanDraw"] = _XFinApi_TradeApi.Account_CanDraw_get
    if _newclass:
        CanDraw = _swig_property(_XFinApi_TradeApi.Account_CanDraw_get, _XFinApi_TradeApi.Account_CanDraw_set)
    __swig_setmethods__["MarketEquity"] = _XFinApi_TradeApi.Account_MarketEquity_set
    __swig_getmethods__["MarketEquity"] = _XFinApi_TradeApi.Account_MarketEquity_get
    if _newclass:
        MarketEquity = _swig_property(_XFinApi_TradeApi.Account_MarketEquity_get, _XFinApi_TradeApi.Account_MarketEquity_set)
    __swig_setmethods__["CurrencyNo"] = _XFinApi_TradeApi.Account_CurrencyNo_set
    __swig_getmethods__["CurrencyNo"] = _XFinApi_TradeApi.Account_CurrencyNo_get
    if _newclass:
        CurrencyNo = _swig_property(_XFinApi_TradeApi.Account_CurrencyNo_get, _XFinApi_TradeApi.Account_CurrencyNo_set)

    def __init__(self):
        this = _XFinApi_TradeApi.new_Account()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Account_swigregister = _XFinApi_TradeApi.Account_swigregister
Account_swigregister(Account)

class TradeListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TradeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_TradeListener
    __del__ = lambda self: None

    def OnNotify(self, notifyParams: 'NotifyParams') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnNotify(self, notifyParams)

    def OnUpdateOrder(self, order: 'Order') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnUpdateOrder(self, order)

    def OnUpdateTradeOrder(self, trade: 'TradeOrder') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnUpdateTradeOrder(self, trade)

    def OnQueryOrder(self, orders: 'OrderList') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnQueryOrder(self, orders)

    def OnQueryTradeOrder(self, trades: 'TradeOrderList') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnQueryTradeOrder(self, trades)

    def OnQueryInstrument(self, insts: 'InstrumentList') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnQueryInstrument(self, insts)

    def OnQueryPosition(self, positions: 'PositionList') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnQueryPosition(self, positions)

    def OnQueryAccount(self, accounts: 'Account') -> "void":
        return _XFinApi_TradeApi.TradeListener_OnQueryAccount(self, accounts)

    def __init__(self):
        if self.__class__ == TradeListener:
            _self = None
        else:
            _self = self
        this = _XFinApi_TradeApi.new_TradeListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _XFinApi_TradeApi.disown_TradeListener(self)
        return weakref_proxy(self)
TradeListener_swigregister = _XFinApi_TradeApi.TradeListener_swigregister
TradeListener_swigregister(TradeListener)

class ITrade(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITrade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITrade, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XFinApi_TradeApi.delete_ITrade
    __del__ = lambda self: None

    def Open(self, params: 'OpenParams') -> "void":
        return _XFinApi_TradeApi.ITrade_Open(self, params)

    def Close(self) -> "void":
        return _XFinApi_TradeApi.ITrade_Close(self)

    def OrderAction(self, order: 'Order') -> "void":
        return _XFinApi_TradeApi.ITrade_OrderAction(self, order)

    def QueryOrder(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.ITrade_QueryOrder(self, params)

    def QueryTradeOrder(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.ITrade_QueryTradeOrder(self, params)

    def QueryInstrument(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.ITrade_QueryInstrument(self, params)

    def QueryPosition(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.ITrade_QueryPosition(self, params)

    def QueryAccount(self, params: 'QueryParams') -> "void":
        return _XFinApi_TradeApi.ITrade_QueryAccount(self, params)

    def IsOpened(self) -> "bool":
        return _XFinApi_TradeApi.ITrade_IsOpened(self)

    def SetListener(self, listener: 'TradeListener') -> "void":
        return _XFinApi_TradeApi.ITrade_SetListener(self, listener)

    def GetOpenParams(self) -> "XFinApi::TradeApi::OpenParams const &":
        return _XFinApi_TradeApi.ITrade_GetOpenParams(self)

    def Version(self, type: 'int'=0) -> "char const *":
        return _XFinApi_TradeApi.ITrade_Version(self, type)
ITrade_swigregister = _XFinApi_TradeApi.ITrade_swigregister
ITrade_swigregister(ITrade)


def XFinApi_CreateTradeApi(path: 'char const *') -> "int *":
    return _XFinApi_TradeApi.XFinApi_CreateTradeApi(path)
XFinApi_CreateTradeApi = _XFinApi_TradeApi.XFinApi_CreateTradeApi

def XFinApi_ReleaseTradeApi(ptr: 'ITrade') -> "void":
    return _XFinApi_TradeApi.XFinApi_ReleaseTradeApi(ptr)
XFinApi_ReleaseTradeApi = _XFinApi_TradeApi.XFinApi_ReleaseTradeApi
# This file is compatible with both classic and new-style classes.


